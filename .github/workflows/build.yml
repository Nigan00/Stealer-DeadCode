name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch: # Ручной запуск через GitHub UI

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install setuptools wheel py7zr==0.22.0
        python -m pip install aqtinstall==3.1.*
        python -m aqt version
      shell: powershell

    - name: Check available Qt modules
      run: |
        Write-Host "Checking available Qt versions and architectures..."
        python -m aqt list-qt windows desktop
        Write-Host "Checking available architectures for Qt 5.15.2..."
        python -m aqt list-qt windows desktop --arch 5.15.2
        Write-Host "Checking available modules for Qt 5.15.2 with win64_mingw81..."
        python -m aqt list-qt windows desktop --modules 5.15.2 win64_mingw81
      shell: powershell
      continue-on-error: true

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        target: 'desktop'
        arch: 'win64_mingw81'
        dir: 'C:/Qt'
        install-deps: 'true'
        cache: 'false'
        cache-key-prefix: 'qt-5.15.2-win64_mingw81'
        setup-python: 'false' # Python уже настроен
        aqtversion: '==3.1.*'
      env:
        AQTINSTALL_DEBUG: true

    - name: Debug Qt installation
      run: |
        Write-Host "Listing contents of C:/Qt..."
        dir C:/Qt -Recurse
        Write-Host "Listing contents of C:/Qt/Qt..."
        dir C:/Qt/Qt -Recurse
        Write-Host "Listing contents of C:/Qt/Qt/5.15.2..."
        dir C:/Qt/Qt/5.15.2 -Recurse
        Write-Host "Listing contents of C:/Qt/Qt/5.15.2/mingw81_64/bin..."
        dir C:/Qt/Qt/5.15.2/mingw81_64/bin -Recurse
      shell: powershell
      continue-on-error: true

    - name: Verify Qt installation
      run: |
        Write-Host "Verifying Qt installation..."
        $qmakePath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/qmake.exe"
        $uicPath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/uic.exe"
        $makePath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/mingw32-make.exe"
        if (-not (Test-Path $qmakePath)) {
          Write-Host "Error: qmake.exe not found at $qmakePath. Searching for qmake.exe..."
          $qmakePath = (Get-ChildItem -Path C:/Qt -Filter qmake.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $qmakePath) {
            Write-Host "Error: qmake.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found qmake.exe at $qmakePath"
        }
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath. Searching for uic.exe..."
          $uicPath = (Get-ChildItem -Path C:/Qt -Filter uic.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $uicPath) {
            Write-Host "Error: uic.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found uic.exe at $uicPath"
        }
        if (-not (Test-Path $makePath)) {
          Write-Host "Error: mingw32-make.exe not found at $makePath. Searching for mingw32-make.exe..."
          $makePath = (Get-ChildItem -Path C:/Qt -Filter mingw32-make.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $makePath) {
            Write-Host "Error: mingw32-make.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found mingw32-make.exe at $makePath"
        }
        $env:Path = [System.IO.Path]::GetDirectoryName($qmakePath) + ";" + $env:Path
        Write-Host "PATH: $env:Path"
        Write-Host "qmake path: $qmakePath"
        Write-Host "uic path: $uicPath"
        Write-Host "mingw32-make path: $makePath"
        Write-Host "Verifying qmake..."
        & $qmakePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed"
          exit 1
        }
        Write-Host "Verifying mingw32-make..."
        & $makePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed"
          exit 1
        }
        Write-Host "Qt and MinGW installation completed and verified"
      shell: powershell

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: C:/vcpkg
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          vcpkg-

    - name: Install vcpkg and dependencies
      run: |
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg..."
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        }
        Write-Host "Updating vcpkg to the latest version..."
        cd C:/vcpkg
        git checkout master
        git pull origin master
        cd ../
        Write-Host "Running bootstrap-vcpkg..."
        & C:/vcpkg/bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed. Check the logs."
          exit 1
        }
        $vcpkgExe = "C:/vcpkg/vcpkg.exe"
        if (-not (Test-Path $vcpkgExe)) {
          Write-Host "Error: vcpkg.exe not found at $vcpkgExe"
          exit 1
        }
        $env:Path = "C:/vcpkg;" + $env:Path
        Write-Host "vcpkg version after bootstrap:"
        & $vcpkgExe --version
        Write-Host "Installing vcpkg dependencies with triplet x64-windows-static..."
        & $vcpkgExe install sqlite3 libzip zlib bzip2 curl --triplet x64-windows-static --clean-after-build 2>&1 | Tee-Object -FilePath "vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed. Check the logs for details."
          dir C:/vcpkg/installed/x64-windows-static/lib
          Write-Host "Printing vcpkg logs..."
          if (Test-Path vcpkg_install.log) {
            Write-Host "Contents of vcpkg_install.log:"
            Get-Content vcpkg_install.log
          }
          exit 1
        }
        Write-Host "vcpkg installation completed successfully"
      shell: powershell

    - name: Upload vcpkg logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs
        path: |
          vcpkg_install.log
        if-no-files-found: warn

    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-windows-static/lib"
        $includeDir = "C:/vcpkg/installed/x64-windows-static/include"
        $libs = @("sqlite3", "zip", "zlib", "bz2", "libcurl")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h")
        $missing = @()
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib.lib")) {
            $missing += "$lib.lib"
          }
        }
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) {
            $missing += $header
          }
        }
        if ($missing) {
          Write-Host "Error: Missing libraries or header files: $missing"
          Write-Host "Contents of directory ${libDir}:"
          dir ${libDir}
          Write-Host "Contents of directory ${includeDir}:"
          dir ${includeDir}
          Write-Host "Contents of directory ${includeDir}/curl:"
          dir ${includeDir}/curl
          exit 1
        }
        if (-not (Test-Path $libDir)) {
          Write-Host "Error: Directory $libDir does not exist"
          exit 1
        }
        Write-Host "Listing all .lib files in $libDir"
        Get-ChildItem -Path $libDir -Filter *.lib
        Write-Host "All vcpkg dependencies verified"
      shell: powershell

    - name: Verify project structure
      run: |
        cd Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Listing contents of project root:"
        dir .
        if (-not (Test-Path ui/DeadCode.pro)) {
          Write-Host "Error: DeadCode.pro not found in ui/"
          dir ui
          exit 1
        }
        if (-not (Test-Path src/main.cpp)) {
          Write-Host "Error: main.cpp not found in src/"
          dir src
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.ui)) {
          Write-Host "Error: mainwindow.ui not found in ui/"
          dir ui
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.cpp)) {
          Write-Host "Error: mainwindow.cpp not found in ui/"
          dir ui
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.h)) {
          Write-Host "Error: mainwindow.h not found in ui/"
          dir ui
          exit 1
        }
        if (-not (Test-Path icon.ico)) {
          Write-Host "Warning: icon.ico not found, creating a placeholder..."
          New-Item -Path . -Name icon.ico -ItemType File -Force
        }
        Write-Host "Creating build directory if it doesn't exist..."
        New-Item -Path build -ItemType Directory -Force
        Write-Host "Creating release directory if it doesn't exist..."
        New-Item -Path release -ItemType Directory -Force
        Write-Host "Verifying write access to build directory..."
        $testFile = "build/test_write.txt"
        try {
          Set-Content -Path $testFile -Value "Test write access"
          Remove-Item -Path $testFile
          Write-Host "Write access to build directory verified"
        } catch {
          Write-Host "Error: No write access to build directory"
          exit 1
        }
        Write-Host "Verifying write access to release directory..."
        $testFile = "release/test_write.txt"
        try {
          Set-Content -Path $testFile -Value "Test write access"
          Remove-Item -Path $testFile
          Write-Host "Write access to release directory verified"
        } catch {
          Write-Host "Error: No write access to release directory"
          exit 1
        }
        Write-Host "Project structure verified"
      shell: powershell

    - name: Verify and generate UI files
      run: |
        cd Stealer-DeadCode
        Write-Host "Checking mainwindow.ui for validity and generating ui_mainwindow.h..."
        $uicPath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/uic.exe"
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath. Searching for uic.exe..."
          $uicPath = (Get-ChildItem -Path C:/Qt -Filter uic.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $uicPath) {
            Write-Host "Error: uic.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found uic.exe at $uicPath"
        }
        Write-Host "Generating ui_mainwindow.h from ui/mainwindow.ui..."
        & $uicPath ui/mainwindow.ui -o release/ui_mainwindow.h 2>&1 | Tee-Object -FilePath "uic_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mainwindow.ui is invalid. Check the logs for details."
          if (Test-Path uic_output.log) {
            Write-Host "Contents of uic_output.log:"
            Get-Content uic_output.log
          }
          exit 1
        }
        if (-not (Test-Path release/ui_mainwindow.h)) {
          Write-Host "Error: ui_mainwindow.h was not generated"
          dir release
          exit 1
        }
        Write-Host "mainwindow.ui is valid and ui_mainwindow.h generated successfully"
      shell: powershell

    - name: Configure and build
      run: |
        cd Stealer-DeadCode
        $qmakePath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/qmake.exe"
        $makePath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/mingw32-make.exe"
        if (-not (Test-Path $qmakePath)) {
          Write-Host "Error: qmake.exe not found at $qmakePath. Searching for qmake.exe..."
          $qmakePath = (Get-ChildItem -Path C:/Qt -Filter qmake.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $qmakePath) {
            Write-Host "Error: qmake.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found qmake.exe at $qmakePath"
        }
        if (-not (Test-Path $makePath)) {
          Write-Host "Error: mingw32-make.exe not found at $makePath. Searching for mingw32-make.exe..."
          $makePath = (Get-ChildItem -Path C:/Qt -Filter mingw32-make.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $makePath) {
            Write-Host "Error: mingw32-make.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found mingw32-make.exe at $makePath"
        }
        $env:Path = [System.IO.Path]::GetDirectoryName($qmakePath) + ";" + $env:Path
        $env:INCLUDE = "C:/vcpkg/installed/x64-windows-static/include;" + $env:INCLUDE
        $env:LIB = "C:/vcpkg/installed/x64-windows-static/lib;" + $env:LIB
        Write-Host "PATH: $env:Path"
        Write-Host "INCLUDE path: $env:INCLUDE"
        Write-Host "LIB path: $env:LIB"
        Write-Host "qmake path: $qmakePath"
        Write-Host "mingw32-make path: $makePath"
        Write-Host "Checking if include path exists..."
        if (-not (Test-Path "C:/vcpkg/installed/x64-windows-static/include")) {
          Write-Host "Error: Include path C:/vcpkg/installed/x64-windows-static/include does not exist"
          dir "C:/vcpkg/installed/x64-windows-static" -Recurse
          exit 1
        }
        Write-Host "Checking if lib path exists..."
        if (-not (Test-Path "C:/vcpkg/installed/x64-windows-static/lib")) {
          Write-Host "Error: Lib path C:/vcpkg/installed/x64-windows-static/lib does not exist"
          dir "C:/vcpkg/installed/x64-windows-static" -Recurse
          exit 1
        }
        Write-Host "Running qmake..."
        & "$qmakePath" "ui/DeadCode.pro" -o "Makefile" 2>&1 | Tee-Object -FilePath "qmake_output.log"
        $qmakeExitCode = $LASTEXITCODE
        if (Test-Path qmake_output.log) {
          Write-Host "Contents of qmake_output.log:"
          Get-Content qmake_output.log
        }
        if ($qmakeExitCode -ne 0) {
          Write-Host "Error: qmake failed with exit code $qmakeExitCode."
          exit 1
        }
        if (-not (Test-Path Makefile)) {
          Write-Host "Error: Makefile was not generated"
          dir .
          exit 1
        }
        Write-Host "Running mingw32-make..."
        & "$makePath" -f Makefile 2>&1 | Tee-Object -FilePath "make_output.log"
        $makeExitCode = $LASTEXITCODE
        if (Test-Path make_output.log) {
          Write-Host "Contents of make_output.log:"
          Get-Content make_output.log
        }
        if ($makeExitCode -ne 0) {
          Write-Host "Error: mingw32-make failed with exit code $makeExitCode."
          exit 1
        }
        if (-not (Test-Path build/DeadCode.exe)) {
          Write-Host "Error: DeadCode.exe was not created"
          dir build
          exit 1
        }
        Write-Host "Build completed successfully"
      shell: powershell

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/uic_output.log
        if-no-files-found: warn

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: |
          Stealer-DeadCode/build/DeadCode.exe
        if-no-files-found: error

    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "Stealer-DeadCode/release" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell