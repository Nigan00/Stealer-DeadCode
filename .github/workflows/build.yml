name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    # Шаг 2: Установка Python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Шаг 3: Установка зависимостей Python для aqtinstall
    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install py7zr aqtinstall --upgrade
        python -m aqt version
      shell: powershell

    # Шаг 4: Проверка доступных архитектур Qt
    - name: Check available Qt architectures
      run: |
        Write-Host "Checking available architectures for Qt 5.15.2..."
        python -m aqt list-qt windows desktop --arch 5.15.2
      shell: powershell

    # Шаг 5: Проверка дискового пространства
    - name: Check disk space
      run: |
        Write-Host "Checking available disk space..."
        Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object DeviceID, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}
      shell: powershell

    # Шаг 6: Кэширование MSYS2
    - name: Cache MSYS2
      uses: actions/cache@v4
      with:
        path: C:/tools/msys64
        key: msys2-${{ runner.os }}-20240727-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          msys2-${{ runner.os }}-20240727-

    # Шаг 7: Проверка сетевого подключения к Chocolatey
    - name: Test network connectivity to Chocolatey
      continue-on-error: true
      run: |
        Write-Host "Testing network connectivity to Chocolatey..."
        $attempts = 3
        $success = $false
        for ($i = 1; $i -le $attempts; $i++) {
          try {
            $response = Invoke-WebRequest -Uri "https://community.chocolatey.org" -Method Head -ErrorAction Stop -TimeoutSec 30
            Write-Host "Successfully connected to community.chocolatey.org (Status: $($response.StatusCode))"
            $success = $true
            break
          } catch {
            Write-Host "Attempt $i/$attempts : Could not connect to community.chocolatey.org. Error: $_"
            if ($i -eq $attempts) {
              Write-Host "Warning: Failed to connect after $attempts attempts. Proceeding anyway..."
            }
            Start-Sleep -Seconds 5
          }
        }
        if (-not $success) {
          Write-Host "Network check failed, but continuing due to continue-on-error."
        }
      shell: powershell

    # Шаг 8: Установка MSYS2 и MinGW
    - name: Install MinGW via MSYS2
      run: |
        Write-Host "Installing MSYS2 and MinGW..."
        $attempts = 3
        $success = $false
        for ($i = 1; $i -le $attempts; $i++) {
          Write-Host "Attempt $i/$attempts : Installing MSYS2 via Chocolatey..."
          choco install msys2 --version 20240727.0.0 -y --timeout 600 --params "/NoUpdate /InstallDir:C:\tools\msys64"
          $exitCode = $LASTEXITCODE
          if ($exitCode -eq 0 -or $exitCode -eq 3010) {
            Write-Host "MSYS2 installed successfully."
            $success = $true
            break
          } else {
            Write-Host "Attempt $i/$attempts : Failed to install MSYS2 (exit code: $exitCode)"
            if ($i -eq $attempts) {
              Write-Host "Error: Failed to install MSYS2 after $attempts attempts."
              exit 1
            }
            Start-Sleep -Seconds 10
          }
        }

        if (-not $success) {
          Write-Host "Error: MSYS2 installation failed after all attempts."
          exit 1
        }

        Write-Host "Refreshing environment variables after MSYS2 installation..."
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        refreshenv

        Write-Host "Terminating any running MSYS2 processes..."
        try {
          C:\tools\msys64\usr\bin\bash.exe -lc "ps -ef | grep '[m]sys' | grep -v grep | awk '{print \$2}' | while read pid; do kill -9 \$pid 2>/dev/null; done"
          Write-Host "MSYS2 processes terminated successfully (if any were running)."
        } catch {
          Write-Host "Warning: Could not terminate MSYS2 processes. This may not be an issue if no processes were running."
        }

        Write-Host "Updating MSYS2 and installing MinGW..."
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm --disable-download-timeout"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: pacman -Syu failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Su --noconfirm --disable-download-timeout"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: pacman -Su failed (exit code: $LASTEXITCODE)"
          exit 1
        }

        # Попытка установки MinGW с повторными попытками
        $mingwSuccess = $false
        for ($i = 1; $i -le $attempts; $i++) {
          Write-Host "Attempt $i/$attempts : Installing MinGW packages..."
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm --disable-download-timeout mingw-w64-x86_64-gcc mingw-w64-x86_64-make"
          if ($LASTEXITCODE -eq 0) {
            Write-Host "MinGW packages installed successfully."
            $mingwSuccess = $true
            break
          } else {
            Write-Host "Attempt $i/$attempts : Failed to install MinGW packages (exit code: $LASTEXITCODE)"
            if ($i -eq $attempts) {
              Write-Host "Error: Failed to install MinGW packages after $attempts attempts."
              exit 1
            }
            Start-Sleep -Seconds 10
          }
        }

        if (-not $mingwSuccess) {
          Write-Host "Error: MinGW installation failed after all attempts."
          exit 1
        }

        Write-Host "Adding MinGW to PATH..."
        $env:Path = "C:\tools\msys64\mingw64\bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)

        Write-Host "Current PATH: $env:Path"

        Write-Host "Verifying MinGW installation..."
        Write-Host "Checking g++..."
        $gppPath = "C:\tools\msys64\mingw64\bin\g++.exe"
        if (-not (Test-Path $gppPath)) {
          Write-Host "Error: g++.exe not found at $gppPath"
          dir C:\tools\msys64\mingw64\bin -ErrorAction SilentlyContinue
          exit 1
        }
        g++ --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed (exit code: $LASTEXITCODE)"
          exit 1
        }

        Write-Host "Checking mingw32-make..."
        $makePath = "C:\tools\msys64\mingw64\bin\mingw32-make.exe"
        if (-not (Test-Path $makePath)) {
          Write-Host "Error: mingw32-make.exe not found at $makePath"
          dir C:\tools\msys64\mingw64\bin -ErrorAction SilentlyContinue
          exit 1
        }
        mingw32-make --version
        Write-Host "mingw32-make --version exit code: $LASTEXITCODE"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed (exit code: $LASTEXITCODE)"
          exit 1
        }
      shell: powershell

    # Шаг 9: Установка Perl (требуется для Qt)
    - name: Install Perl (required for Qt)
      run: |
        Write-Host "Installing Perl via Chocolatey..."
        choco install strawberryperl -y --force
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Failed to install Perl via Chocolatey (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Refreshing environment variables..."
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        refreshenv
      shell: powershell

    # Шаг 10: Кэширование Qt
    - name: Cache Qt
      uses: actions/cache@v4
      with:
        path: C:/Qt
        key: qt-5.15.2-${{ runner.os }}-win64_mingw81-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          qt-5.15.2-${{ runner.os }}-win64_mingw81-

    # Шаг 11: Установка Qt 5.15.2 через aqtinstall
    - name: Install Qt 5.15.2 via aqtinstall
      run: |
        Write-Host "Installing Qt 5.15.2 with MinGW 8.1..."
        python -m aqt install-qt windows desktop 5.15.2 win64_mingw81 -O C:/Qt --archives qtbase qttools qtsvg qtdeclarative qtquickcontrols qtquickcontrols2 qtgraphicaleffects qtimageformats qtsql
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Qt 5.15.2 via aqtinstall"
          exit 1
        }
        Write-Host "Qt installation completed."
      shell: powershell

    # Шаг 12: Проверка установки Qt
    - name: Verify Qt installation
      run: |
        Write-Host "Verifying Qt installation..."
        $qmakePath = "C:/Qt/5.15.2/win64_mingw81/bin/qmake.exe"
        $uicPath = "C:/Qt/5.15.2/win64_mingw81/bin/uic.exe"
        if (-not (Test-Path $qmakePath)) {
          Write-Host "Error: qmake.exe not found at $qmakePath"
          dir C:/Qt -Recurse
          exit 1
        }
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath"
          dir C:/Qt -Recurse
          exit 1
        }
        $env:Path = "C:/tools/msys64/mingw64/bin;C:/Qt/5.15.2/win64_mingw81/bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Verifying qmake..."
        & $qmakePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed"
          exit 1
        }
        Write-Host "Qt installation verified"
      shell: powershell

    # Шаг 13: Кэширование vcpkg
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: C:/vcpkg
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          vcpkg-

    # Шаг 14: Установка vcpkg и зависимостей
    - name: Install vcpkg and dependencies
      run: |
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg..."
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to clone vcpkg repository"
            exit 1
          }
        }
        Write-Host "Running bootstrap-vcpkg..."
        & C:/vcpkg/bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed. Check the logs."
          exit 1
        }
        $vcpkgExe = "C:/vcpkg/vcpkg.exe"
        $env:Path = "C:/vcpkg;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Cleaning vcpkg buildtrees and installed directories..."
        Remove-Item -Path "C:/vcpkg/buildtrees" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "C:/vcpkg/installed" -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "Installing vcpkg dependencies with triplet x64-mingw-static..."
        & $vcpkgExe install sqlite3 libzip zlib bzip2 curl openssl --triplet x64-mingw-static --clean-after-build 2>&1 | Tee-Object -FilePath "Stealer-DeadCode/vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed. Check the logs for details."
          if (Test-Path Stealer-DeadCode/vcpkg_install.log) {
            Get-Content Stealer-DeadCode/vcpkg_install.log
          }
          exit 1
        }
        Write-Host "vcpkg installation completed successfully"
      shell: powershell

    # Шаг 15: Загрузка логов vcpkg в случае ошибки
    - name: Upload vcpkg logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs
        path: Stealer-DeadCode/vcpkg_install.log
        if-no-files-found: warn

    # Шаг 16: Проверка установки vcpkg
    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-mingw-static/lib"
        $includeDir = "C:/vcpkg/installed/x64-mingw-static/include"
        $libs = @("libsqlite3.a", "libzip.a", "libzlib.a", "libbz2.a", "libcurl.a", "libssl.a", "libcrypto.a")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h", "openssl/ssl.h", "openssl/crypto.h")
        $missing = @()
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib")) {
            $missing += "$lib"
          }
        }
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) {
            $missing += $header
          }
        }
        if ($missing) {
          Write-Host "Error: Missing libraries or header files: $missing"
          dir $libDir
          dir $includeDir
          exit 1
        }
        Write-Host "All vcpkg dependencies verified as static"
      shell: powershell

    # Шаг 17: Проверка структуры проекта
    - name: Verify project structure
      run: |
        cd Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"
        $requiredFiles = @(
          "ui/DeadCode.pro",
          "src/main.cpp",
          "ui/mainwindow.ui",
          "ui/mainwindow.cpp",
          "ui/mainwindow.h",
          "src/build_key.h",
          "src/polymorphic_code.h",
          "src/junk_code.h",
          "src/stealerworker.h",
          "icon.rc",
          "icon.ico"
        )
        $missingFiles = @()
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            $missingFiles += $file
          }
        }
        if ($missingFiles) {
          Write-Host "Error: Missing required files: $missingFiles"
          dir ui -ErrorAction SilentlyContinue
          dir src -ErrorAction SilentlyContinue
          dir . -ErrorAction SilentlyContinue
          exit 1
        }
        Write-Host "Creating build directory if it doesn't exist..."
        New-Item -Path build -ItemType Directory -Force
        Write-Host "Creating release directory if it doesn't exist..."
        New-Item -Path release -ItemType Directory -Force
        Write-Host "Project structure verified"
      shell: powershell

    # Шаг 18: Исправление кодировки icon.rc
    - name: Fix icon.rc encoding
      run: |
        cd Stealer-DeadCode
        Write-Host "Fixing encoding of icon.rc..."
        $content = Get-Content -Path icon.rc -Raw
        Set-Content -Path icon.rc -Value $content -NoNewline -Encoding ASCII
        Write-Host "icon.rc encoding fixed to ASCII"
      shell: powershell

    # Шаг 19: Генерация UI-файлов
    - name: Verify and generate UI files
      run: |
        cd Stealer-DeadCode
        Write-Host "Generating ui_mainwindow.h from ui/mainwindow.ui..."
        $uicPath = "C:/Qt/5.15.2/win64_mingw81/bin/uic.exe"
        $outputPath = "$(Get-Location)/release/ui_mainwindow.h"
        & $uicPath ui/mainwindow.ui -o $outputPath 2>&1 | Tee-Object -FilePath "uic_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: uic.exe failed. Check uic_output.log for details."
          Get-Content uic_output.log
          exit 1
        }
        if (-not (Test-Path $outputPath)) {
          Write-Host "Error: $outputPath was not generated"
          exit 1
        }
        Write-Host "ui_mainwindow.h generated successfully at $outputPath"
      shell: powershell

    # Шаг 20: Конфигурация и сборка проекта
    - name: Configure and build
      run: |
        cd Stealer-DeadCode
        Write-Host "Setting up temporary directory..."
        $tempDir = "C:/Temp"
        if (-not (Test-Path $tempDir)) {
          New-Item -Path $tempDir -ItemType Directory -Force
        }
        $env:TEMP = $tempDir
        $env:TMP = $tempDir
        Write-Host "TEMP set to: $env:TEMP"
        Write-Host "TMP set to: $env:TMP"

        $env:Path = "C:/Qt/5.15.2/win64_mingw81/bin;C:/vcpkg;C:/tools/msys64/mingw64/bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Updated PATH: $env:Path"

        # Устанавливаем BUILD_DATE и BUILD_VERSION
        $buildDate = Get-Date -Format "yyyy-MM-dd"
        $buildVersion = git rev-parse --short HEAD
        if (-not $buildVersion) {
          $buildVersion = "unknown"
        }
        Write-Host "Build Date: $buildDate"
        Write-Host "Build Version: $buildVersion"

        cd build
        Write-Host "Running qmake..."
        C:/Qt/5.15.2/win64_mingw81/bin/qmake.exe ../ui/DeadCode.pro CONFIG+=release QMAKE_CXXFLAGS+=-Wno-attributes "DEFINES+=BUILD_DATE=\\\"$buildDate\\\"" "DEFINES+=BUILD_VERSION=\\\"$buildVersion\\\"" 2>&1 | Tee-Object -FilePath "../qmake_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed. Check qmake_output.log for details."
          Get-Content ../qmake_output.log
          exit 1
        }

        Write-Host "Running mingw32-make..."
        C:/tools/msys64/mingw64/bin/mingw32-make.exe -f Makefile.Release -j1 2>&1 | Tee-Object -FilePath "../make_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make failed. Check make_output.log for details."
          Get-Content ../make_output.log
          exit 1
        }

        if (-not (Test-Path DeadCode.exe)) {
          Write-Host "Error: DeadCode.exe was not generated in build/"
          dir .
          exit 1
        }
        Write-Host "Build completed successfully"
      shell: powershell

    # Шаг 21: Проверка зависимостей DeadCode.exe
    - name: Check DeadCode.exe dependencies
      run: |
        cd Stealer-DeadCode/build
        Write-Host "Checking dependencies of DeadCode.exe..."
        $env:Path += ";C:/tools/msys64/mingw64/bin"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        $objdump = "C:/tools/msys64/mingw64/bin/objdump.exe"
        if (-not (Test-Path $objdump)) {
          Write-Host "Error: objdump.exe not found at $objdump"
          exit 1
        }
        & $objdump -p DeadCode.exe | Select-String "DLL Name" > dependencies.txt
        if (Test-Path dependencies.txt) {
          Write-Host "Dependencies of DeadCode.exe:"
          Get-Content dependencies.txt
        } else {
          Write-Host "No dependencies found or objdump failed."
        }
      shell: powershell

    # Шаг 22: Копирование необходимых DLL и плагинов Qt
    - name: Copy Qt DLLs and dependencies to build directory
      run: |
        cd Stealer-DeadCode/build
        Write-Host "Copying Qt DLLs and dependencies to build directory..."
        $qtBinDir = "C:/Qt/5.15.2/win64_mingw81/bin"
        $qtPluginsDir = "C:/Qt/5.15.2/win64_mingw81/plugins"
        $mingwBinDir = "C:/tools/msys64/mingw64/bin"

        # Основные Qt DLL
        $requiredQtDlls = @(
          "Qt5Core.dll",
          "Qt5Gui.dll",
          "Qt5Network.dll",
          "Qt5Widgets.dll",
          "Qt5Svg.dll",
          "Qt5Declarative.dll",
          "Qt5Quick.dll",
          "Qt5QuickControls2.dll",
          "Qt5QuickWidgets.dll",
          "Qt5Sql.dll",
          "Qt5Qml.dll",
          "Qt5QmlModels.dll",
          "Qt5QmlWorkerScript.dll"
        )

        # MinGW DLL
        $requiredMingwDlls = @(
          "libwinpthread-1.dll",
          "libgcc_s_seh-1.dll",
          "libstdc++-6.dll"
        )

        # Копируем Qt DLL
        foreach ($dll in $requiredQtDlls) {
          if (Test-Path "$qtBinDir/$dll") {
            Copy-Item -Path "$qtBinDir/$dll" -Destination .
            Write-Host "Copied $dll to build directory"
          } else {
            Write-Host "Warning: $dll not found in $qtBinDir"
          }
        }

        # Копируем MinGW DLL
        foreach ($dll in $requiredMingwDlls) {
          if (Test-Path "$mingwBinDir/$dll") {
            Copy-Item -Path "$mingwBinDir/$dll" -Destination .
            Write-Host "Copied $dll to build directory"
          } else {
            Write-Host "Warning: $dll not found in $mingwBinDir"
          }
        }

        # Копируем Qt плагины
        if (Test-Path "$qtPluginsDir") {
          # Платформа Windows
          if (Test-Path "$qtPluginsDir/platforms") {
            New-Item -Path "platforms" -ItemType Directory -Force
            Copy-Item -Path "$qtPluginsDir/platforms/qwindows.dll" -Destination "platforms/" -ErrorAction SilentlyContinue
            Write-Host "Copied Qt platform plugin qwindows.dll"
          }

          # Стили
          if (Test-Path "$qtPluginsDir/styles") {
            New-Item -Path "styles" -ItemType Directory -Force
            Copy-Item -Path "$qtPluginsDir/styles/qwindowsvistastyle.dll" -Destination "styles/" -ErrorAction SilentlyContinue
            Write-Host "Copied Qt style plugin qwindowsvistastyle.dll"
          }

          # Форматы изображений
          if (Test-Path "$qtPluginsDir/imageformats") {
            New-Item -Path "imageformats" -ItemType Directory -Force
            Copy-Item -Path "$qtPluginsDir/imageformats/*.dll" -Destination "imageformats/" -ErrorAction SilentlyContinue
            Write-Host "Copied Qt imageformats plugins"
          }

          # Qt Quick
          if (Test-Path "$qtPluginsDir/quick") {
            New-Item -Path "quick" -ItemType Directory -Force
            Copy-Item -Path "$qtPluginsDir/quick/*.dll" -Destination "quick/" -ErrorAction SilentlyContinue
            Write-Host "Copied Qt Quick plugins"
          }

          # Qt QML
          if (Test-Path "$qtPluginsDir/qmltooling") {
            New-Item -Path "qmltooling" -ItemType Directory -Force
            Copy-Item -Path "$qtPluginsDir/qmltooling/*.dll" -Destination "qmltooling/" -ErrorAction SilentlyContinue
            Write-Host "Copied Qt QML tooling plugins"
          }

          # Qt SQL драйверы
          if (Test-Path "$qtPluginsDir/sqldrivers") {
            New-Item -Path "sqldrivers" -ItemType Directory -Force
            Copy-Item -Path "$qtPluginsDir/sqldrivers/*.dll" -Destination "sqldrivers/" -ErrorAction SilentlyContinue
            Write-Host "Copied Qt SQL drivers"
          }
        } else {
          Write-Host "Warning: Qt plugins directory not found at $qtPluginsDir"
        }

        Write-Host "Listing contents of build directory after copying DLLs:"
        dir .
        dir platforms -ErrorAction SilentlyContinue
        dir styles -ErrorAction SilentlyContinue
        dir imageformats -ErrorAction SilentlyContinue
        dir quick -ErrorAction SilentlyContinue
        dir qmltooling -ErrorAction SilentlyContinue
        dir sqldrivers -ErrorAction SilentlyContinue
      shell: powershell

    # Шаг 23: Загрузка логов сборки в случае ошибки
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/uic_output.log
          Stealer-DeadCode/vcpkg_install.log
        if-no-files-found: warn

    # Шаг 24: Загрузка артефакта
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: |
          Stealer-DeadCode/build/DeadCode.exe
          Stealer-DeadCode/build/Qt5Core.dll
          Stealer-DeadCode/build/Qt5Gui.dll
          Stealer-DeadCode/build/Qt5Network.dll
          Stealer-DeadCode/build/Qt5Widgets.dll
          Stealer-DeadCode/build/Qt5Svg.dll
          Stealer-DeadCode/build/Qt5Declarative.dll
          Stealer-DeadCode/build/Qt5Quick.dll
          Stealer-DeadCode/build/Qt5QuickControls2.dll
          Stealer-DeadCode/build/Qt5QuickWidgets.dll
          Stealer-DeadCode/build/Qt5Sql.dll
          Stealer-DeadCode/build/Qt5Qml.dll
          Stealer-DeadCode/build/Qt5QmlModels.dll
          Stealer-DeadCode/build/Qt5QmlWorkerScript.dll
          Stealer-DeadCode/build/libwinpthread-1.dll
          Stealer-DeadCode/build/libgcc_s_seh-1.dll
          Stealer-DeadCode/build/libstdc++-6.dll
          Stealer-DeadCode/build/platforms/qwindows.dll
          Stealer-DeadCode/build/styles/qwindowsvistastyle.dll
          Stealer-DeadCode/build/imageformats/*.dll
          Stealer-DeadCode/build/quick/*.dll
          Stealer-DeadCode/build/qmltooling/*.dll
          Stealer-DeadCode/build/sqldrivers/*.dll
        if-no-files-found: error

    # Шаг 25: Очистка
    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "Stealer-DeadCode/release" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell