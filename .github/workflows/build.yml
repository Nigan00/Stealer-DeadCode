name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

env:
  VCPKG_COMMIT: "a73c889be74ece2c6654b580133e0e267e879255"  # SHA коммита vcpkg от 2024-10-18
  QT_VERSION: "5.15.2"  # Основная версия Qt

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    # Шаг 2: Установка Python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # Шаг 3: Проверка и установка Chocolatey
    - name: Check and Install Chocolatey
      run: |
        Write-Host "Checking for Chocolatey..."
        $chocoPath = "C:\ProgramData\chocolatey\bin\choco.exe"
        if (Test-Path $chocoPath) {
          Write-Host "Chocolatey found, upgrading..."
          & $chocoPath upgrade chocolatey -y --force --execution-timeout=600
        } else {
          Write-Host "Installing Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        }
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Chocolatey setup failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        $env:Path = "C:\ProgramData\chocolatey\bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Chocolatey version:"
        choco --version
      shell: powershell

    # Шаг 4: Установка 7-Zip
    - name: Install 7-Zip
      run: |
        Write-Host "Installing 7-Zip via Chocolatey..."
        choco install 7zip -y --force --execution-timeout=600
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Failed to install 7-Zip (exit code: $LASTEXITCODE)"
          exit 1
        }
        $env:Path = "C:\Program Files\7-Zip;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "7-Zip installation completed"
      shell: powershell

    # Шаг 5: Установка зависимостей Python для aqtinstall
    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install py7zr aqtinstall==3.2.1 requests beautifulsoup4
        python -m aqt version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Python dependencies (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Python dependencies installed successfully"
      shell: powershell

    # Шаг 6: Создание конфигурационного файла для aqtinstall
    - name: Create aqtinstall configuration file
      run: |
        Write-Host "Creating aqtinstall settings.ini..."
        New-Item -Path "aqt_settings.ini" -ItemType File -Force
        Set-Content -Path "aqt_settings.ini" -Value @"
        [mirrors]
        trusted_mirrors = https://download.qt.io, https://mirrors.tuna.tsinghua.edu.cn/qt
        preferred_mirror = https://download.qt.io

        [requests]
        max_retries_to_retrieve_hash = 15
        timeout = 180
        "@
        Write-Host "aqtinstall settings.ini created with content:"
        Get-Content -Path "aqt_settings.ini"
      shell: powershell

    # Шаг 7: Кэширование Qt
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v4
      with:
        path: C:/Qt
        key: qt-${{ env.QT_VERSION }}-${{ runner.os }}-win64_mingw81-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          qt-${{ env.QT_VERSION }}-${{ runner.os }}-win64_mingw81-

    # Шаг 8: Установка Qt через aqtinstall (если кэш не восстановлен)
    - name: Install Qt via aqtinstall
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: |
        Write-Host "Installing Qt ${{ env.QT_VERSION }} with MinGW 8.1..."
        $qtArgs = @(
          "-m", "aqt", "install-qt",
          "-O", "C:/Qt",
          "-c", "aqt_settings.ini",
          "windows", "desktop", "${{ env.QT_VERSION }}", "win64_mingw81",
          "-m", "qtbase", "qttools", "qtsvg", "qtdeclarative", "qtquickcontrols", "qtquickcontrols2", "qtimageformats", "qtsql", "qtquick"
        )
        Write-Host "Executing command: python $qtArgs"
        & python $qtArgs 2>&1 | Tee-Object -FilePath "qt_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Qt ${{ env.QT_VERSION }}. Check qt_install.log for details."
          Get-Content "qt_install.log"
          exit 1
        }
        Write-Host "Qt ${{ env.QT_VERSION }} installed successfully"
      shell: powershell

    # Шаг 9: Установка MinGW 8.1 через aqtinstall (если кэш не восстановлен)
    - name: Install MinGW 8.1 via aqtinstall
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: |
        Write-Host "Installing MinGW 8.1 (GCC 8) for C++17 support..."
        $mingwArgs = @(
          "-m", "aqt", "install-tool",
          "-O", "C:/Qt",
          "-c", "aqt_settings.ini",
          "windows", "desktop", "tools_mingw", "qt.tools.win64_mingw810"
        )
        Write-Host "Executing command: python $mingwArgs"
        & python $mingwArgs 2>&1 | Tee-Object -FilePath "mingw_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install MinGW 8.1. Check mingw_install.log for details."
          Get-Content "mingw_install.log"
          exit 1
        }
        Write-Host "MinGW 8.1 installed successfully"
      shell: powershell

    # Шаг 10: Проверка установки Qt и MinGW
    - name: Verify Qt and MinGW installation
      run: |
        Write-Host "Verifying Qt and MinGW installation..."
        $qtVersion = "${{ env.QT_VERSION }}"
        $paths = @(
          "C:/Qt/$qtVersion/mingw81_64/bin/qmake.exe",
          "C:/Qt/$qtVersion/mingw81_64/bin/uic.exe",
          "C:/Qt/Tools/mingw810_64/bin/g++.exe",
          "C:/Qt/Tools/mingw810_64/bin/mingw32-make.exe",
          "C:/Qt/$qtVersion/mingw81_64/bin/Qt5Core.dll"
        )
        foreach ($path in $paths) {
          if (-not (Test-Path $path)) {
            Write-Host "Error: $path not found"
            dir C:/Qt -Recurse
            exit 1
          }
        }
        $env:Path = "C:/Qt/$qtVersion/mingw81_64/bin;C:/Qt/Tools/mingw810_64/bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        qmake --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        & "C:/Qt/Tools/mingw810_64/bin/g++.exe" --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        & "C:/Qt/Tools/mingw810_64/bin/mingw32-make.exe" --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Qt $qtVersion and MinGW setup verified successfully"
      shell: powershell

    # Шаг 11: Кэширование Strawberry Perl
    - name: Cache Strawberry Perl
      uses: actions/cache@v4
      with:
        path: C:/Strawberry
        key: strawberry-perl-${{ runner.os }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          strawberry-perl-${{ runner.os }}-

    # Шаг 12: Установка Perl
    - name: Install Perl via Chocolatey
      run: |
        Write-Host "Installing Strawberry Perl via Chocolatey..."
        choco install strawberryperl -y --force --execution-timeout=600
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Failed to install Perl (exit code: $LASTEXITCODE)"
          exit 1
        }
        $env:Path = "C:\Strawberry\perl\bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Perl installation completed"
      shell: powershell

    # Шаг 13: Кэширование vcpkg
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          C:/vcpkg
          C:/vcpkg/installed
        key: vcpkg-${{ env.VCPKG_COMMIT }}-${{ hashFiles('Stealer-DeadCode/vcpkg.json') }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          vcpkg-${{ env.VCPKG_COMMIT }}-

    # Шаг 14: Очистка и обновление vcpkg
    - name: Clean and update vcpkg
      run: |
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg repository..."
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to clone vcpkg (exit code: $LASTEXITCODE)"
            exit 1
          }
        }
        Set-Location C:/vcpkg
        Write-Host "Checking out commit ${{ env.VCPKG_COMMIT }}..."
        git fetch origin
        git checkout ${{ env.VCPKG_COMMIT }}
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to checkout commit (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Running bootstrap-vcpkg..."
        .\bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "vcpkg version:"
        .\vcpkg.exe --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to get vcpkg version (exit code: $LASTEXITCODE)"
          exit 1
        }
      shell: powershell

    # Шаг 15: Проверка и обновление vcpkg.json
    - name: Check and update vcpkg.json
      run: |
        Set-Location $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Checking vcpkg.json..."
        if (-not (Test-Path vcpkg.json)) {
          Write-Host "Error: vcpkg.json not found"
          dir .
          exit 1
        }
        Write-Host "Updating builtin-baseline and OpenSSL version..."
        $vcpkgJson = Get-Content vcpkg.json -Raw | ConvertFrom-Json
        $vcpkgJson.'builtin-baseline' = "${{ env.VCPKG_COMMIT }}"
        $openssl = $vcpkgJson.dependencies | Where-Object { $_.name -eq "openssl" }
        if ($openssl) {
          $openssl.'version>=' = "1.1.1n"
        } else {
          Write-Host "Error: OpenSSL dependency not found in vcpkg.json"
          exit 1
        }
        $vcpkgJson | ConvertTo-Json -Depth 10 | Set-Content vcpkg.json -Encoding UTF8
        Write-Host "Updated vcpkg.json content:"
        Get-Content vcpkg.json
      shell: powershell

    # Шаг 16: Проверка доступных версий библиотек
    - name: Check available library versions
      run: |
        Set-Location C:/vcpkg
        Write-Host "Checking available versions of required libraries..."
        $libraries = @("libzip", "sqlite3", "zlib", "bzip2", "curl", "openssl")
        foreach ($lib in $libraries) {
          Write-Host "Searching for $lib..."
          .\vcpkg.exe search $lib
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to search for $lib (exit code: $LASTEXITCODE)"
            exit 1
          }
        }
      shell: powershell

    # Шаг 17: Установка vcpkg и зависимостей
    - name: Install vcpkg and dependencies
      run: |
        Set-Location C:/vcpkg
        Write-Host "Integrating vcpkg..."
        .\vcpkg.exe integrate install
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Warning: vcpkg integrate install failed, proceeding without integration"
        }
        $env:Path = "C:/vcpkg;" + $env:Path
        $env:VCPKG_ROOT = "C:/vcpkg"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("VCPKG_ROOT", $env:VCPKG_ROOT, [System.EnvironmentVariableTarget]::Process)
        Set-Location $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Installing vcpkg dependencies..."
        C:/vcpkg/vcpkg.exe install --triplet x64-mingw-dynamic --clean-after-build 2>&1 | Tee-Object -FilePath "vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed (exit code: $LASTEXITCODE)"
          Get-Content "vcpkg_install.log"
          exit 1
        }
        Write-Host "vcpkg installation completed successfully"
      shell: powershell

    # Шаг 18: Переименование DLL
    - name: Rename vcpkg DLLs
      run: |
        Set-Location C:/vcpkg/installed/x64-mingw-dynamic/bin
        Write-Host "Renaming vcpkg DLLs..."
        $dllRenames = @{
          "libzlib1.dll" = "zlib1.dll"
          "libbz2.dll" = "bz2.dll"
          "libssl-1_1-x64.dll" = "libssl.dll"
          "libcrypto-1_1-x64.dll" = "libcrypto.dll"
        }
        foreach ($oldName in $dllRenames.Keys) {
          $newName = $dllRenames[$oldName]
          if (Test-Path $oldName) {
            Rename-Item -Path $oldName -NewName $newName
            Write-Host "Renamed $oldName to $newName"
          }
        }
        Write-Host "Listing contents of bin directory:"
        dir
      shell: powershell

    # Шаг 19: Загрузка логов vcpkg в случае ошибки
    - name: Upload vcpkg logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs
        path: Stealer-DeadCode/vcpkg_install.log
        if-no-files-found: warn

    # Шаг 20: Проверка установки vcpkg
    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-mingw-dynamic/lib"
        $binDir = "C:/vcpkg/installed/x64-mingw-dynamic/bin"
        $includeDir = "C:/vcpkg/installed/x64-mingw-dynamic/include"
        $libs = @("libsqlite3.dll.a", "libzip.dll.a", "libzlib.dll.a", "libbz2.dll.a", "libcurl.dll.a", "libssl.dll.a", "libcrypto.dll.a")
        $dlls = @("libsqlite3.dll", "libzip.dll", "zlib1.dll", "bz2.dll", "libcurl.dll", "libssl.dll", "libcrypto.dll")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h", "openssl/ssl.h", "openssl/crypto.h")
        $missing = @()

        Write-Host "Checking vcpkg installation..."
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib")) { $missing += "$lib" }
        }
        foreach ($dll in $dlls) {
          if (-not (Test-Path "$binDir/$dll")) { $missing += "$dll" }
        }
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) { $missing += "$header" }
        }
        if ($missing) {
          Write-Host "Error: Missing files: $missing"
          dir $libDir -Recurse -ErrorAction SilentlyContinue
          dir $binDir -Recurse -ErrorAction SilentlyContinue
          dir $includeDir -Recurse -ErrorAction SilentlyContinue
          exit 1
        }
        Write-Host "All vcpkg dependencies verified as dynamic"
      shell: powershell

    # Шаг 21: Проверка структуры проекта
    - name: Verify project structure
      run: |
        Set-Location $env:GITHUB_WORKSPACE/Stealer-DeadCode
        $requiredFiles = @(
          "ui/DeadCode.pro",
          "src/main.cpp",
          "ui/mainwindow.ui",
          "ui/mainwindow.cpp",
          "ui/mainwindow.h",
          "src/build_key.h",
          "src/polymorphic_code.h",
          "src/junk_code.h",
          "src/stealerworker.h",
          "src/compat.h",
          "icon.rc",
          "icon.ico"
        )
        $missingFiles = $requiredFiles | Where-Object { -not (Test-Path $_) }
        if ($missingFiles) {
          Write-Host "Error: Missing required files: $missingFiles"
          dir ui -ErrorAction SilentlyContinue
          dir src -ErrorAction SilentlyContinue
          dir . -ErrorAction SilentlyContinue
          exit 1
        }
        New-Item -Path build -ItemType Directory -Force
        New-Item -Path build/release -ItemType Directory -Force
        Write-Host "Project structure verified"
      shell: powershell

    # Шаг 22: Исправление кодировки icon.rc
    - name: Fix icon.rc encoding
      run: |
        Set-Location $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Fixing encoding of icon.rc..."
        $content = Get-Content -Path icon.rc -Raw -Encoding UTF8
        Set-Content -Path icon.rc -Value $content -NoNewline -Encoding ASCII
        Write-Host "icon.rc encoding fixed to ASCII"
      shell: powershell

    # Шаг 23: Генерация UI-файлов
    - name: Generate UI files
      run: |
        Set-Location $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Generating ui_mainwindow.h..."
        $qtVersion = "${{ env.QT_VERSION }}"
        & "C:/Qt/$qtVersion/mingw81_64/bin/uic.exe" ui/mainwindow.ui -o build/release/ui_mainwindow.h 2>&1 | Tee-Object -FilePath "uic_output.log"
        if ($LASTEXITCODE -ne 0 -or -not (Test-Path "build/release/ui_mainwindow.h")) {
          Write-Host "Error: uic failed (exit code: $LASTEXITCODE)"
          Get-Content "uic_output.log"
          exit 1
        }
        Write-Host "ui_mainwindow.h generated successfully"
      shell: powershell

    # Шаг 24: Конфигурация и сборка проекта
    - name: Configure and build
      run: |
        Set-Location $env:GITHUB_WORKSPACE/Stealer-DeadCode
        $qtVersion = "${{ env.QT_VERSION }}"
        $env:TEMP = [System.IO.Path]::GetTempPath()
        $env:TMP = $env:TEMP
        $env:Path = "C:/Qt/$qtVersion/mingw81_64/bin;C:/Qt/Tools/mingw810_64/bin;C:/vcpkg;" + $env:Path
        $env:VCPKG_ROOT = "C:/vcpkg"
        $env:QML2_IMPORT_PATH = "C:/Qt/$qtVersion/mingw81_64/qml"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("VCPKG_ROOT", $env:VCPKG_ROOT, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("QML2_IMPORT_PATH", $env:QML2_IMPORT_PATH, [System.EnvironmentVariableTarget]::Process)

        $buildDate = Get-Date -Format "yyyy-MM-dd"
        $buildVersion = git rev-parse --short HEAD
        if (-not $buildVersion) { $buildVersion = "unknown" }
        Write-Host "Build Date: $buildDate"
        Write-Host "Build Version: $buildVersion"

        Set-Location build
        Write-Host "Running qmake..."
        & "C:/Qt/$qtVersion/mingw81_64/bin/qmake.exe" ../ui/DeadCode.pro CONFIG+=release QMAKE_CXXFLAGS+=-Wno-attributes "DEFINES+=BUILD_DATE=`"$buildDate`"" "DEFINES+=BUILD_VERSION=`"$buildVersion`"" -spec win32-g++ INCLUDEPATH+=C:/vcpkg/installed/x64-mingw-dynamic/include LIBS+=-LC:/vcpkg/installed/x64-mingw-dynamic/lib LIBS+=-lstdc++fs 2>&1 | Tee-Object -FilePath "../qmake_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed (exit code: $LASTEXITCODE)"
          Get-Content "../qmake_output.log"
          exit 1
        }
        Write-Host "Running mingw32-make..."
        & "C:/Qt/Tools/mingw810_64/bin/mingw32-make.exe" -f Makefile.Release -j4 2>&1 | Tee-Object -FilePath "../make_output.log"
        if ($LASTEXITCODE -ne 0 -or -not (Test-Path release/DeadCode.exe)) {
          Write-Host "Error: mingw32-make failed (exit code: $LASTEXITCODE)"
          Get-Content "../make_output.log"
          dir .
          dir release
          exit 1
        }
        Write-Host "Build completed successfully"
      shell: powershell

    # Шаг 25: Тестирование запуска DeadCode.exe
    - name: Test run DeadCode.exe
      run: |
        Set-Location $env:GITHUB_WORKSPACE/Stealer-DeadCode/build
        $qtVersion = "${{ env.QT_VERSION }}"
        $env:Path = "C:/Qt/$qtVersion/mingw81_64/bin;C:/Qt/Tools/mingw810_64/bin;C:/vcpkg/installed/x64-mingw-dynamic/bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Running DeadCode.exe..."
        try {
          Start-Process -FilePath "release/DeadCode.exe" -NoNewWindow -Wait -RedirectStandardOutput "deadcode_output.log" -RedirectStandardError "deadcode_error.log" -ErrorAction Stop
          Write-Host "DeadCode.exe executed successfully"
        } catch {
          Write-Host "Warning: Failed to run DeadCode.exe, continuing anyway"
        }
        Write-Host "Standard Output:"; Get-Content "deadcode_output.log" -ErrorAction SilentlyContinue
        Write-Host "Standard Error:"; Get-Content "deadcode_error.log" -ErrorAction SilentlyContinue
      shell: powershell
      continue-on-error: true

    # Шаг 26: Копирование необходимых DLL и плагинов Qt
    - name: Copy Qt DLLs and dependencies
      run: |
        Set-Location $env:GITHUB_WORKSPACE/Stealer-DeadCode/build
        $qtVersion = "${{ env.QT_VERSION }}"
        Write-Host "Copying Qt DLLs and dependencies to release directory..."
        $dirs = @(
          @{ Dlls = @("Qt5Core.dll", "Qt5Gui.dll", "Qt5Network.dll", "Qt5Widgets.dll", "Qt5Svg.dll", "Qt5Declarative.dll", "Qt5Quick.dll", "Qt5QuickControls2.dll", "Qt5Sql.dll", "Qt5Qml.dll", "Qt5QmlModels.dll", "Qt5QmlWorkerScript.dll"); Source = "C:/Qt/$qtVersion/mingw81_64/bin" },
          @{ Dlls = @("libwinpthread-1.dll", "libgcc_s_seh-1.dll", "libstdc++-6.dll"); Source = "C:/Qt/Tools/mingw810_64/bin" },
          @{ Dlls = @("libsqlite3.dll", "libzip.dll", "zlib1.dll", "bz2.dll", "libcurl.dll", "libssl.dll", "libcrypto.dll"); Source = "C:/vcpkg/installed/x64-mingw-dynamic/bin" }
        )
        foreach ($dir in $dirs) {
          foreach ($dll in $dir.Dlls) {
            if (Test-Path "$($dir.Source)/$dll") {
              Copy-Item -Path "$($dir.Source)/$dll" -Destination release/ -Force
              Write-Host "Copied $dll to release directory"
            } else {
              Write-Host "Warning: $dll not found in $($dir.Source), skipping"
            }
          }
        }
        $qtPluginsDir = "C:/Qt/$qtVersion/mingw81_64/plugins"
        if (Test-Path $qtPluginsDir) {
          $pluginDirs = @("platforms/qwindows.dll", "styles/qwindowsvistastyle.dll", "imageformats/*.dll", "quick/*.dll", "qmltooling/*.dll", "sqldrivers/*.dll")
          foreach ($plugin in $pluginDirs) {
            $dest = $plugin -replace "[/*].*$", ""
            if (Test-Path "$qtPluginsDir/$plugin") {
              New-Item -Path "release/$dest" -ItemType Directory -Force
              Copy-Item -Path "$qtPluginsDir/$plugin" -Destination "release/$dest/" -Force -ErrorAction SilentlyContinue
              Write-Host "Copied Qt plugin $plugin"
            } else {
              Write-Host "Warning: Qt plugin $plugin not found"
            }
          }
        } else {
          Write-Host "Error: Qt plugins directory not found at $qtPluginsDir"
          exit 1
        }
        $qtQmlDir = "C:/Qt/$qtVersion/mingw81_64/qml"
        if (Test-Path $qtQmlDir) {
          $qmlModules = @("QtQml", "QtQuick", "QtQuick.2", "QtQuick.Controls", "QtQuick.Controls.2", "QtQuick.Layouts", "QtQuick.Templates.2", "QtQuick.Window.2", "Qt")
          foreach ($module in $qmlModules) {
            if (Test-Path "$qtQmlDir/$module") {
              New-Item -Path "release/$module" -ItemType Directory -Force
              Copy-Item -Path "$qtQmlDir/$module/*" -Destination "release/$module/" -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "Copied QML module $module"
            } else {
              Write-Host "Warning: QML module $module not found"
            }
          }
        } else {
          Write-Host "Error: QML directory not found at $qtQmlDir"
          exit 1
        }
        Write-Host "Listing contents of release directory:"
        dir release -Recurse
      shell: powershell

    # Шаг 27: Загрузка логов сборки в случае ошибки
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qt_install.log
          Stealer-DeadCode/mingw_install.log
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/uic_output.log
          Stealer-DeadCode/vcpkg_install.log
          Stealer-DeadCode/build/deadcode_output.log
          Stealer-DeadCode/build/deadcode_error.log
        if-no-files-found: warn

    # Шаг 28: Загрузка артефакта
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: |
          Stealer-DeadCode/build/release/DeadCode.exe
          Stealer-DeadCode/build/release/*.dll
          Stealer-DeadCode/build/release/platforms/qwindows.dll
          Stealer-DeadCode/build/release/styles/qwindowsvistastyle.dll
          Stealer-DeadCode/build/release/imageformats/*.dll
          Stealer-DeadCode/build/release/quick/*.dll
          Stealer-DeadCode/build/release/qmltooling/*.dll
          Stealer-DeadCode/build/release/sqldrivers/*.dll
          Stealer-DeadCode/build/release/QtQml/**/*
          Stealer-DeadCode/build/release/QtQuick/**/*
          Stealer-DeadCode/build/release/QtQuick.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Controls/**/*
          Stealer-DeadCode/build/release/QtQuick.Controls.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Layouts/**/*
          Stealer-DeadCode/build/release/QtQuick.Templates.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Window.2/**/*
          Stealer-DeadCode/build/release/Qt/**/*
        if-no-files-found: error

    # Шаг 29: Очистка
    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell