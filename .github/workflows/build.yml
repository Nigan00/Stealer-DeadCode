name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

env:
  VCPKG_COMMIT: "a73c889be74ece2c6654b580133e0e267e879255"  # Стабильный коммит vcpkg
  QT_VERSION: "6.5.3"  # Версия Qt 6 для совместимости с mainwindow.cpp

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    # Шаг 2: Установка Python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # Шаг 3: Установка Chocolatey
    - name: Setup Chocolatey
      run: |
        Write-Host "Checking for Chocolatey installation..."
        if (Test-Path "C:\ProgramData\Chocolatey\bin\choco.exe") {
          Write-Host "Chocolatey already installed."
          $env:Path = "C:\ProgramData\Chocolatey\bin;" + $env:Path
          choco --version
        } else {
          Write-Host "Installing Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
            Write-Host "Error: Chocolatey setup failed"
            exit 1
          }
          $env:Path = "C:\ProgramData\Chocolatey\bin;" + $env:Path
        }
      shell: powershell

    # Шаг 4: Установка 7-Zip
    - name: Install 7-Zip
      run: |
        Write-Host "Installing 7-Zip..."
        choco install 7zip -y --force --no-progress
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Failed to install 7-Zip"
          exit 1
        }
        $env:Path = "C:\Program Files\7-Zip;" + $env:Path
      shell: powershell

    # Шаг 5: Кэширование Qt
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v4
      with:
        path: C:\Qt
        key: qt-${{ env.QT_VERSION }}-${{ runner.os }}-win64_mingw-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          qt-${{ env.QT_VERSION }}-${{ runner.os }}-win64_mingw-

    # Шаг 6: Установка Qt и MinGW
    - name: Install Qt 6.5.3 and MinGW
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: |
        Write-Host "Installing aqtinstall..."
        python -m pip install aqtinstall==3.1.18
        Write-Host "Installing Qt 6.5.3..."
        python -m aqt install-qt windows desktop 6.5.3 win64_mingw -O C:/Qt --archives qtbase qttools qtsql qtnetwork
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Qt"
          exit 1
        }
        Write-Host "Installing MinGW..."
        python -m aqt install-tool windows desktop tools_mingw1120_64 qt.tools.win64_mingw1120_64 -O C:/Qt
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install MinGW. Listing available tools:"
          python -m aqt list-tool windows desktop tools_mingw
          exit 1
        }
        Write-Host "MinGW installed. Checking directory:"
        dir C:\Qt\Tools\mingw1120_64\bin
      shell: powershell

    # Шаг 7: Проверка Qt и MinGW
    - name: Verify Qt and MinGW
      run: |
        Write-Host "Verifying Qt and MinGW..."
        $qtVersion = "${{ env.QT_VERSION }}"
        $paths = @(
          "C:\Qt\$qtVersion\mingw_64\bin\qmake.exe",
          "C:\Qt\$qtVersion\mingw_64\bin\uic.exe",
          "C:\Qt\$qtVersion\mingw_64\bin\windeployqt.exe",
          "C:\Qt\Tools\mingw1120_64\bin\g++.exe",
          "C:\Qt\Tools\mingw1120_64\bin\mingw32-make.exe",
          "C:\Qt\$qtVersion\mingw_64\bin\Qt6Core.dll",
          "C:\Qt\$qtVersion\mingw_64\bin\Qt6Gui.dll",
          "C:\Qt\$qtVersion\mingw_64\bin\Qt6Widgets.dll",
          "C:\Qt\$qtVersion\mingw_64\bin\Qt6Network.dll",
          "C:\Qt\$qtVersion\mingw_64\bin\Qt6Sql.dll"
        )
        foreach ($path in $paths) {
          if (-not (Test-Path $path)) {
            Write-Host "Error: $path not found"
            exit 1
          }
        }
        $env:Path = "C:\Qt\$qtVersion\mingw_64\bin;C:\Qt\Tools\mingw1120_64\bin;" + $env:Path
        qmake --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed"
          exit 1
        }
        & "C:\Qt\Tools\mingw1120_64\bin\g++.exe" --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ failed"
          exit 1
        }
      shell: powershell

    # Шаг 8: Кэширование vcpkg
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          C:\vcpkg
          C:\vcpkg\installed
        key: vcpkg-${{ env.VCPKG_COMMIT }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          vcpkg-${{ env.VCPKG_COMMIT }}-

    # Шаг 9: Установка vcpkg
    - name: Setup vcpkg
      run: |
        Write-Host "Setting up vcpkg..."
        if (-not (Test-Path C:\vcpkg)) {
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to clone vcpkg"
            exit 1
          }
        }
        Set-Location C:\vcpkg
        git checkout ${{ env.VCPKG_COMMIT }}
        .\bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed"
          exit 1
        }
      shell: powershell

    # Шаг 10: Установка зависимостей vcpkg
    - name: Install vcpkg dependencies
      run: |
        Set-Location C:\vcpkg
        Write-Host "Installing vcpkg dependencies..."
        .\vcpkg.exe install sqlite3 curl openssl libzip --triplet x64-windows-static --clean-after-build
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install dependencies"
          exit 1
        }
      shell: powershell

    # Шаг 11: Проверка структуры проекта
    - name: Verify project structure
      run: |
        Set-Location $env:GITHUB_WORKSPACE\Stealer-DeadCode
        $requiredFiles = @(
          "ui\DeadCode.pro",
          "src\main.cpp",
          "ui\mainwindow.ui",
          "ui\mainwindow.cpp",
          "ui\mainwindow.h",
          "src\build_key.h",
          "src\polymorphic_code.h",
          "src\junk_code.h",
          "src\stealerworker.h",
          "icon.rc",
          "icon.ico"
        )
        $missingFiles = $requiredFiles | Where-Object { -not (Test-Path $_) }
        if ($missingFiles) {
          Write-Host "Error: Missing files: $missingFiles"
          exit 1
        }
        if (-not (Test-Path "config.json")) {
          Write-Host "Creating stub config.json..."
          Set-Content -Path "config.json" -Value "{}"
        }
        Write-Host "Project structure verified"
      shell: powershell

    # Шаг 12: Исправление кодировки icon.rc
    - name: Fix icon.rc encoding
      run: |
        Set-Location $env:GITHUB_WORKSPACE\Stealer-DeadCode
        Write-Host "Fixing encoding of icon.rc..."
        $content = Get-Content -Path icon.rc -Raw -Encoding UTF8
        Set-Content -Path icon.rc -Value $content -NoNewline -Encoding ASCII
        Write-Host "icon.rc encoding fixed to ASCII"
      shell: powershell

    # Шаг 13: Генерация UI-файлов
    - name: Generate UI files
      run: |
        Set-Location $env:GITHUB_WORKSPACE\Stealer-DeadCode
        Write-Host "Generating ui_mainwindow.h..."
        $uicPath = "C:\Qt\${{ env.QT_VERSION }}\mingw_64\bin\uic.exe"
        New-Item -Path "build\release" -ItemType Directory -Force
        & $uicPath ui\mainwindow.ui -o build\release\ui_mainwindow.h
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: uic failed"
          exit 1
        }
        Write-Host "ui_mainwindow.h generated"
      shell: powershell

    # Шаг 14: Конфигурация и сборка
    - name: Configure and build
      run: |
        Set-Location $env:GITHUB_WORKSPACE\Stealer-DeadCode
        $env:Path = "C:\Qt\${{ env.QT_VERSION }}\mingw_64\bin;C:\Qt\Tools\mingw1120_64\bin;C:\vcpkg;" + $env:Path
        $env:VCPKG_ROOT = "C:\vcpkg"
        
        # Установка временной директории
        $env:TEMP = "C:\Temp"
        $env:TMP = "C:\Temp"
        New-Item -Path "C:\Temp" -ItemType Directory -Force
        
        # Генерация BUILD_DATE и BUILD_VERSION
        $buildDate = Get-Date -Format "yyyy-MM-dd"
        $buildVersion = git rev-parse --short HEAD
        if (-not $buildVersion) { $buildVersion = "unknown" }
        
        Set-Location build
        Write-Host "Running qmake..."
        qmake ..\ui\DeadCode.pro CONFIG+=release QMAKE_INCDIR+="C:\vcpkg\installed\x64-windows-static\include" QMAKE_LIBDIR+="C:\vcpkg\installed\x64-windows-static\lib" DEFINES+="BUILD_DATE=\\\"$buildDate\\\"" DEFINES+="BUILD_VERSION=\\\"$buildVersion\\\""
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed"
          exit 1
        }
        
        Write-Host "Running mingw32-make..."
        mingw32-make -f Makefile.Release -j4
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make failed"
          exit 1
        }
        
        if (-not (Test-Path release\DeadCode.exe)) {
          Write-Host "Error: DeadCode.exe not found"
          exit 1
        }
        Write-Host "Build completed"
      shell: powershell

    # Шаг 15: Развёртывание зависимостей Qt
    - name: Deploy Qt dependencies
      run: |
        Set-Location $env:GITHUB_WORKSPACE\Stealer-DeadCode\build\release
        $env:Path = "C:\Qt\${{ env.QT_VERSION }}\mingw_64\bin;C:\Qt\Tools\mingw1120_64\bin;" + $env:Path
        Write-Host "Running windeployqt..."
        windeployqt DeadCode.exe --release --no-translations --no-opengl-sw --no-system-d3d-compiler
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: windeployqt failed"
          exit 1
        }
        Write-Host "Qt dependencies deployed"
      shell: powershell

    # Шаг 16: Копирование vcpkg-зависимостей
    - name: Copy vcpkg dependencies
      run: |
        Set-Location $env:GITHUB_WORKSPACE\Stealer-DeadCode\build\release
        $vcpkgBinDir = "C:\vcpkg\installed\x64-windows-static\bin"
        $dlls = @(
          "sqlite3.dll",
          "libcurl.dll",
          "libssl-3-x64.dll",
          "libcrypto-3-x64.dll",
          "libzip.dll"
        )
        foreach ($dll in $dlls) {
          if (Test-Path "$vcpkgBinDir\$dll") {
            Copy-Item -Path "$vcpkgBinDir\$dll" -Destination .
            Write-Host "Copied $dll"
          } else {
            Write-Host "Warning: $dll not found in vcpkg"
          }
        }
        Write-Host "vcpkg dependencies copied"
      shell: powershell

    # Шаг 17: Копирование дополнительных файлов
    - name: Copy additional files
      run: |
        Set-Location $env:GITHUB_WORKSPACE\Stealer-DeadCode
        Copy-Item -Path "config.json" -Destination "build\release\"
        Copy-Item -Path "icon.ico" -Destination "build\release\"
        New-Item -Path "build\release\data" -ItemType Directory -Force
        Write-Host "Additional files copied"
      shell: powershell

    # Шаг 18: Проверка наличия всех файлов
    - name: Verify all files
      run: |
        Set-Location $env:GITHUB_WORKSPACE\Stealer-DeadCode\build\release
        $requiredFiles = @(
          "DeadCode.exe",
          "Qt6Core.dll",
          "Qt6Gui.dll",
          "Qt6Widgets.dll",
          "Qt6Network.dll",
          "Qt6Sql.dll",
          "sqlite3.dll",
          "libcurl.dll",
          "libssl-3-x64.dll",
          "libcrypto-3-x64.dll",
          "libzip.dll",
          "plugins\platforms\qwindows.dll",
          "plugins\sqldrivers\qsqlite.dll",
          "config.json",
          "icon.ico",
          "data"
        )
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            Write-Host "Error: $file is missing"
            exit 1
          }
        }
        Write-Host "All required files are present"
      shell: powershell

    # Шаг 19: Создание артефакта
    - name: Create artifact
      run: |
        Set-Location $env:GITHUB_WORKSPACE\Stealer-DeadCode\build
        7z a DeadCode-Portable.zip .\release\*
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to create zip archive"
          exit 1
        }
      shell: powershell

    # Шаг 20: Загрузка артефакта
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Portable
        path: $env:GITHUB_WORKSPACE\Stealer-DeadCode\build\DeadCode-Portable.zip
        if-no-files-found: error

    # Шаг 21: Очистка
    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "$env:GITHUB_WORKSPACE\Stealer-DeadCode\build" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell