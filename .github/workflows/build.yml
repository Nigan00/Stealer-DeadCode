name: Build DeadCode

on:
  workflow_dispatch: # Ручной запуск через GitHub UI
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    - name: Install CMake
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: '3.28.0'
      continue-on-error: false

    - name: Verify CMake installation
      run: |
        $cmakePath = "cmake"
        if (-not (Get-Command $cmakePath -ErrorAction SilentlyContinue)) {
          Write-Host "Error: cmake not found in PATH"
          exit 1
        }
        Write-Host "CMake version:"
        & $cmakePath --version
      shell: powershell

    - name: Install Perl
      run: |
        Write-Host "Installing Perl..."
        choco install strawberryperl -y
        $perlPath = "perl"
        if (-not (Get-Command $perlPath -ErrorAction SilentlyContinue)) {
          Write-Host "Error: perl not found in PATH"
          exit 1
        }
        Write-Host "Perl version:"
        & $perlPath --version
      shell: powershell

    - name: Set up MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install setuptools wheel py7zr==0.20.*
        python -m pip install aqtinstall==3.1.*
        python -m aqt version
      shell: powershell

    - name: Install Qt manually
      run: |
        Write-Host "Installing Qt 5.15.2 with aqtinstall..."
        New-Item -Path "C:/Qt" -ItemType Directory -Force
        python -m aqt install-qt --outputdir C:/Qt windows desktop 5.15.2 win64_msvc2019_64 --autodesktop
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Qt with aqtinstall"
          exit 1
        }
        Write-Host "Qt installation completed"
      shell: powershell
      env:
        AQTINSTALL_DEBUG: true

    - name: Debug Qt installation
      run: |
        Write-Host "Listing contents of C:/Qt:"
        if (Test-Path C:/Qt) {
          dir C:/Qt -Recurse
        } else {
          Write-Host "Directory C:/Qt does not exist!"
          exit 1
        }
        Write-Host "Checking for qmake.exe in C:/Qt/5.15.2:"
        $qmakePath = (Get-ChildItem -Path C:/Qt/5.15.2 -Filter qmake.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
        if ($qmakePath) {
          Write-Host "qmake.exe found at $qmakePath!"
        } else {
          Write-Host "qmake.exe not found in C:/Qt/5.15.2"
          exit 1
        }
      shell: powershell

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: C:/vcpkg
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          vcpkg-

    - name: Install vcpkg and dependencies
      run: |
        # Сбрасываем VCPKG_ROOT в начале шага
        $env:VCPKG_ROOT = ""
        Write-Host "VCPKG_ROOT after reset: $env:VCPKG_ROOT"
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg..."
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        }
        Write-Host "Updating vcpkg to the latest version..."
        cd C:/vcpkg
        git checkout master
        git pull origin master
        cd ../
        Write-Host "Running bootstrap-vcpkg..."
        & C:/vcpkg/bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed. Check the logs."
          exit 1
        }
        $vcpkgExe = "C:/vcpkg/vcpkg.exe"
        if (-not (Test-Path $vcpkgExe)) {
          Write-Host "Error: vcpkg.exe not found at $vcpkgExe"
          exit 1
        }
        $env:Path = "C:/vcpkg;" + $env:Path
        Write-Host "vcpkg version after bootstrap:"
        & $vcpkgExe --version
        Write-Host "Checking Perl before installation..."
        $perlPath = (Get-Command perl -ErrorAction SilentlyContinue).Path
        Write-Host "Perl path: $perlPath"
        & perl --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Perl is not working correctly"
          exit 1
        }
        Write-Host "Clearing vcpkg cache..."
        & $vcpkgExe remove --outdated --recurse
        Write-Host "Clearing vcpkg buildtrees..."
        Remove-Item -Path "C:/vcpkg/buildtrees" -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "Installing vcpkg dependencies with triplet x64-windows-static..."
        & $vcpkgExe install sqlite3 libzip zlib bzip2 openssl --triplet x64-windows-static --clean-after-build 2>&1 | Tee-Object -FilePath "vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed. Check the logs for details."
          dir C:/vcpkg/installed/x64-windows-static/lib
          Write-Host "Printing vcpkg logs..."
          dir C:/vcpkg/buildtrees/openssl
          if (Test-Path C:/vcpkg/buildtrees/openssl/install-x64-windows-static-rel-err.log) {
            Write-Host "Contents of install-x64-windows-static-rel-err.log:"
            Get-Content C:/vcpkg/buildtrees/openssl/install-x64-windows-static-rel-err.log
          }
          if (Test-Path C:/vcpkg/buildtrees/openssl/install-x64-windows-static-rel-out.log) {
            Write-Host "Contents of install-x64-windows-static-rel-out.log:"
            Get-Content C:/vcpkg/buildtrees/openssl/install-x64-windows-static-rel-out.log
          }
          if (Test-Path vcpkg_install.log) {
            Write-Host "Contents of vcpkg_install.log:"
            Get-Content vcpkg_install.log
          }
          exit 1
        }
        Write-Host "vcpkg installation completed successfully"
      shell: powershell
      env:
        VCPKG_PERL_LICENSE_ACCEPTED: 1

    - name: Upload vcpkg logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs
        path: |
          C:/vcpkg/buildtrees/openssl/install-x64-windows-static-rel-err.log
          C:/vcpkg/buildtrees/openssl/install-x64-windows-static-rel-out.log
          vcpkg_install.log
        if-no-files-found: warn

    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-windows-static/lib"
        $includeDir = "C:/vcpkg/installed/x64-windows-static/include"
        $libs = @("sqlite3", "zip", "zlib", "bz2", "libssl", "libcrypto")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "openssl/ssl.h", "openssl/crypto.h")
        $missing = @()
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib.lib")) {
            $missing += "$lib.lib"
          }
        }
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) {
            $missing += $header
          }
        }
        if ($missing) {
          Write-Host "Error: Missing libraries or header files: $missing"
          Write-Host "Contents of directory ${libDir}:"
          dir ${libDir}
          Write-Host "Contents of directory ${includeDir}:"
          dir ${includeDir}
          Write-Host "Contents of directory ${includeDir}/openssl:"
          dir ${includeDir}/openssl
          exit 1
        }
        if (-not (Test-Path $libDir)) {
          Write-Host "Error: Directory $libDir does not exist"
          exit 1
        }
        Write-Host "Listing all .lib files in $libDir"
        Get-ChildItem -Path $libDir -Filter *.lib
        Write-Host "All vcpkg dependencies verified"
      shell: powershell

    - name: Verify Qt installation
      run: |
        $qmakePath = (Get-ChildItem -Path C:/Qt/5.15.2 -Filter qmake.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
        if (-not $qmakePath) {
          Write-Host "Error: qmake not found in C:/Qt/5.15.2"
          exit 1
        }
        $qtBinPath = [System.IO.Path]::GetDirectoryName($qmakePath)
        $env:Path = "$qtBinPath;" + $env:Path
        & $qmakePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed"
          exit 1
        }
        Write-Host "Qt installation verified"
      shell: powershell

    - name: Verify project structure
      run: |
        cd Stealer-DeadCode
        if (-not (Test-Path ui/DeadCode.pro)) {
          Write-Host "Error: DeadCode.pro not found in ui/"
          dir ui
          exit 1
        }
        if (-not (Test-Path src/main.cpp)) {
          Write-Host "Error: main.cpp not found in src/"
          dir src
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.ui)) {
          Write-Host "Error: mainwindow.ui not found in ui/"
          dir ui
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.cpp)) {
          Write-Host "Error: mainwindow.cpp not found in ui/"
          dir ui
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.h)) {
          Write-Host "Error: mainwindow.h not found in ui/"
          dir ui
          exit 1
        }
        if (-not (Test-Path icon.rc)) {
          Write-Host "Error: icon.rc not found in root directory"
          dir .
          exit 1
        }
        Write-Host "Creating build directory if it doesn't exist..."
        New-Item -Path ../build -ItemType Directory -Force
        Write-Host "Verifying write access to build directory..."
        $testFile = "../build/test_write.txt"
        try {
          Set-Content -Path $testFile -Value "Test write access"
          Remove-Item -Path $testFile
          Write-Host "Write access to build directory verified"
        } catch {
          Write-Host "Error: No write access to build directory"
          exit 1
        }
        Write-Host "Project structure verified"
      shell: powershell

    - name: Generate headers
      run: |
        cd Stealer-DeadCode
        if (-not (Test-Path src/build_key.h)) {
          New-Item -Path src -Name build_key.h -ItemType File -Force
          Add-Content src/build_key.h ""
        }
        if (-not (Test-Path src/polymorphic_code.h)) {
          New-Item -Path src -Name polymorphic_code.h -ItemType File -Force
          Add-Content src/polymorphic_code.h ""
        }
        if (-not (Test-Path src/junk_code.h)) {
          New-Item -Path src -Name junk_code.h -ItemType File -Force
          Add-Content src/junk_code.h ""
        }
      shell: powershell

    - name: Configure and build
      run: |
        cd Stealer-DeadCode
        $qmakePath = (Get-ChildItem -Path C:/Qt/5.15.2 -Filter qmake.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
        $qtBinPath = [System.IO.Path]::GetDirectoryName($qmakePath)
        $env:Path = "$qtBinPath;" + $env:Path
        $env:INCLUDE = "C:/vcpkg/installed/x64-windows-static/include;" + $env:INCLUDE
        $env:LIB = "C:/vcpkg/installed/x64-windows-static/lib;" + $env:LIB
        Write-Host "INCLUDE path: $env:INCLUDE"
        Write-Host "LIB path: $env:LIB"
        Write-Host "qmake path: $qmakePath"
        Write-Host "Checking icon.rc and icon.ico..."
        if (Test-Path icon.rc) {
          Write-Host "icon.rc exists. Contents of icon.rc:"
          Get-Content icon.rc
        } else {
          Write-Host "icon.rc not found!"
        }
        if (Test-Path icon.ico) {
          Write-Host "icon.ico exists."
        } else {
          Write-Host "icon.ico not found!"
        }
        Write-Host "Running qmake..."
        & "$qmakePath" -spec win32-msvc "ui/DeadCode.pro" -o "Makefile" 2>&1 | Tee-Object -FilePath "qmake_output.log"
        $qmakeExitCode = $LASTEXITCODE
        if (Test-Path qmake_output.log) {
          Write-Host "Contents of qmake_output.log:"
          Get-Content qmake_output.log
        }
        if ($qmakeExitCode -ne 0) {
          Write-Host "Error: qmake failed with exit code $qmakeExitCode."
          exit 1
        }
        if (-not (Test-Path Makefile)) {
          Write-Host "Error: Makefile was not generated"
          exit 1
        }
        Write-Host "Running nmake..."
        & nmake -f Makefile.Release 2>&1 | Tee-Object -FilePath "nmake_output.log"
        $nmakeExitCode = $LASTEXITCODE
        if (Test-Path nmake_output.log) {
          Write-Host "Contents of nmake_output.log:"
          Get-Content nmake_output.log
        }
        if ($nmakeExitCode -ne 0) {
          Write-Host "Error: nmake failed with exit code $nmakeExitCode."
          exit 1
        }
        if (-not (Test-Path ../build/DeadCode.exe)) {
          Write-Host "Error: DeadCode.exe was not created"
          dir ../build
          exit 1
        }
        if (Test-Path icon.ico) {
          Copy-Item icon.ico ../build/icon.ico
          Write-Host "Icon copied to build directory"
        }
        if (Test-Path src/build_key.h) {
          Copy-Item src/build_key.h ../build/build_key.h
          Write-Host "build_key.h copied to build directory"
        }
        if (Test-Path src/polymorphic_code.h) {
          Copy-Item src/polymorphic_code.h ../build/polymorphic_code.h
          Write-Host "polymorphic_code.h copied to build directory"
        }
      shell: powershell

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/nmake_output.log
        if-no-files-found: warn

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode.exe
        path: Stealer-DeadCode/../build/DeadCode.exe

    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "C:/vcpkg" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "C:/Qt" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell