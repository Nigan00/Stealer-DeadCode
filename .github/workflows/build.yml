name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install setuptools wheel py7zr==0.22.0
        python -m pip install aqtinstall==3.1.*
        python -m aqt version
      shell: powershell

    - name: Check available Qt modules
      run: |
        Write-Host "Checking available Qt versions and architectures..."
        python -m aqt list-qt windows desktop
        Write-Host "Checking available architectures for Qt 5.15.2..."
        python -m aqt list-qt windows desktop --arch 5.15.2
        Write-Host "Checking available modules for Qt 5.15.2 with win64_mingw81..."
        python -m aqt list-qt windows desktop --modules 5.15.2 win64_mingw81
        Write-Host "Checking available MinGW tools..."
        python -m aqt list-tool windows desktop tools_mingw
      shell: powershell
      continue-on-error: true

    - name: Check disk space
      run: |
        Write-Host "Checking available disk space..."
        Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object DeviceID, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}
      shell: powershell

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        target: 'desktop'
        arch: 'win64_mingw81'
        dir: 'C:/Qt'
        install-deps: 'true'
        cache: 'false'
        setup-python: 'false'
      env:
        AQTINSTALL_DEBUG: true

    - name: Install MinGW via Chocolatey
      run: |
        Write-Host "Installing Chocolatey..."
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        
        Write-Host "Installing MinGW via Chocolatey..."
        choco install mingw -y
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install MinGW via Chocolatey"
          exit 1
        }
        
        Write-Host "Refreshing environment variables..."
        refreshenv
        
        Write-Host "Listing contents of MinGW directory..."
        dir "C:\ProgramData\mingw64\mingw64\bin"
        
        Write-Host "Adding MinGW to PATH..."
        $mingwPath = "C:\ProgramData\mingw64\mingw64\bin"
        if (-not (Test-Path $mingwPath)) {
          Write-Host "Error: MinGW not found at $mingwPath"
          exit 1
        }
        $env:Path = "$mingwPath;" + $env:Path
        Write-Host "PATH updated: $env:Path"
        
        Write-Host "Verifying MinGW installation..."
        g++ --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed"
          exit 1
        }
        
        Write-Host "Copying entire MinGW directory to Qt directory..."
        $mingwSource = "C:\ProgramData\mingw64\mingw64"
        $mingwDest = "C:/Qt/Qt/5.15.2/mingw81_64"
        if (-not (Test-Path $mingwSource)) {
          Write-Host "Error: MinGW source directory $mingwSource not found"
          exit 1
        }
        Copy-Item -Path "$mingwSource/*" -Destination $mingwDest -Recurse -Force
        
        Write-Host "Verifying g++ in Qt bin directory..."
        if (-not (Test-Path "$mingwDest/bin/g++.exe")) {
          Write-Host "Error: g++.exe not found in $mingwDest/bin/"
          dir "$mingwDest/bin/"
          exit 1
        }
        Write-Host "MinGW installation via Chocolatey completed"
      shell: powershell

    - name: Debug Qt installation
      run: |
        Write-Host "Listing contents of C:/Qt..."
        dir C:/Qt -Recurse
        Write-Host "Listing contents of C:/Qt/Qt..."
        dir C:/Qt/Qt -Recurse
        Write-Host "Listing contents of C:/Qt/Qt/5.15.2..."
        dir C:/Qt/Qt/5.15.2 -Recurse
        Write-Host "Listing contents of C:/Qt/Qt/5.15.2/mingw81_64/bin..."
        dir C:/Qt/Qt/5.15.2/mingw81_64/bin -Recurse
      shell: powershell
      continue-on-error: true

    - name: Verify Qt installation
      run: |
        Write-Host "Verifying Qt installation..."
        $qmakePath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/qmake.exe"
        $uicPath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/uic.exe"
        $makePath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/mingw32-make.exe"
        $gppPath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/g++.exe"
        if (-not (Test-Path $qmakePath)) {
          Write-Host "Error: qmake.exe not found at $qmakePath. Searching for qmake.exe..."
          $qmakePath = (Get-ChildItem -Path C:/Qt -Filter qmake.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $qmakePath) {
            Write-Host "Error: qmake.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found qmake.exe at $qmakePath"
        }
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath. Searching for uic.exe..."
          $uicPath = (Get-ChildItem -Path C:/Qt -Filter uic.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $uicPath) {
            Write-Host "Error: uic.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found uic.exe at $uicPath"
        }
        if (-not (Test-Path $makePath)) {
          Write-Host "Error: mingw32-make.exe not found at $makePath. Searching for mingw32-make.exe..."
          $makePath = (Get-ChildItem -Path C:/Qt -Filter mingw32-make.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $makePath) {
            Write-Host "Error: mingw32-make.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found mingw32-make.exe at $makePath"
        }
        if (-not (Test-Path $gppPath)) {
          Write-Host "Error: g++.exe not found at $gppPath. Searching for g++.exe..."
          $gppPath = (Get-ChildItem -Path C:/Qt -Filter g++.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $gppPath) {
            Write-Host "Error: g++.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found g++.exe at $gppPath"
        }
        $env:Path = [System.IO.Path]::GetDirectoryName($qmakePath) + ";" + $env:Path
        Write-Host "PATH: $env:Path"
        Write-Host "qmake path: $qmakePath"
        Write-Host "uic path: $uicPath"
        Write-Host "mingw32-make path: $makePath"
        Write-Host "g++ path: $gppPath"
        Write-Host "Verifying qmake..."
        & $qmakePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed"
          exit 1
        }
        Write-Host "Verifying mingw32-make..."
        & $makePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed"
          exit 1
        }
        Write-Host "Verifying g++..."
        & $gppPath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed"
          exit 1
        }
        Write-Host "Determining MinGW version..."
        $gppVersionOutput = & $gppPath --version | Select-Object -First 1
        $gppVersion = $gppVersionOutput -replace ".* (\d+\.\d+\.\d+).*", '$1'
        Write-Host "Detected MinGW version: $gppVersion"
        Write-Host "Checking for g++ dependencies..."
        $requiredDlls = @("libgcc_s_seh-1.dll", "libstdc++-6.dll", "libwinpthread-1.dll")
        foreach ($dll in $requiredDlls) {
          if (-not (Test-Path "C:/Qt/Qt/5.15.2/mingw81_64/bin/$dll")) {
            Write-Host "Warning: $dll not found in C:/Qt/Qt/5.15.2/mingw81_64/bin/"
            $dllPath = (Get-ChildItem -Path "C:/Qt" -Filter $dll -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
            if ($dllPath) {
              Write-Host "Found $dll at $dllPath, copying to C:/Qt/Qt/5.15.2/mingw81_64/bin/"
              Copy-Item -Path $dllPath -Destination "C:/Qt/Qt/5.15.2/mingw81_64/bin/" -Force
            } else {
              Write-Host "Error: $dll not found in C:/Qt"
              exit 1
            }
          } else {
            Write-Host "$dll found in C:/Qt/Qt/5.15.2/mingw81_64/bin/"
          }
        }
        Write-Host "Checking for cc1plus.exe..."
        $cc1plusPath = "C:/Qt/Qt/5.15.2/mingw81_64/libexec/gcc/x86_64-w64-mingw32/$gppVersion/cc1plus.exe"
        if (-not (Test-Path $cc1plusPath)) {
          Write-Host "Error: cc1plus.exe not found at $cc1plusPath"
          Write-Host "Listing contents of C:/Qt/Qt/5.15.2/mingw81_64/libexec/gcc/x86_64-w64-mingw32/$gppVersion/..."
          dir "C:/Qt/Qt/5.15.2/mingw81_64/libexec/gcc/x86_64-w64-mingw32/$gppVersion/" -ErrorAction SilentlyContinue
          $cc1plusPath = (Get-ChildItem -Path "C:/Qt" -Filter cc1plus.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $cc1plusPath) {
            Write-Host "Error: cc1plus.exe not found in C:/Qt"
            dir "C:/Qt/Qt/5.15.2/mingw81_64/libexec" -Recurse
            exit 1
          }
          Write-Host "Found cc1plus.exe at $cc1plusPath"
        } else {
          Write-Host "cc1plus.exe found at $cc1plusPath"
        }
        Write-Host "Qt and MinGW installation completed and verified"
      shell: powershell

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: C:/vcpkg
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          vcpkg-

    - name: Install vcpkg and dependencies
      run: |
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg..."
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        }
        Write-Host "Running bootstrap-vcpkg..."
        & C:/vcpkg/bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed. Check the logs."
          exit 1
        }
        $vcpkgExe = "C:/vcpkg/vcpkg.exe"
        if (-not (Test-Path $vcpkgExe)) {
          Write-Host "Error: vcpkg.exe not found at $vcpkgExe"
          exit 1
        }
        $env:Path = "C:/vcpkg;" + $env:Path
        Write-Host "vcpkg version after bootstrap:"
        & $vcpkgExe --version
        Write-Host "Cleaning vcpkg buildtrees and installed directories..."
        Remove-Item -Path "C:/vcpkg/buildtrees" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "C:/vcpkg/installed" -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "Installing vcpkg dependencies with triplet x64-mingw-static..."
        & $vcpkgExe install sqlite3 libzip zlib bzip2 curl openssl --triplet x64-mingw-static --clean-after-build 2>&1 | Tee-Object -FilePath "vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed. Check the logs for details."
          dir C:/vcpkg/installed/x64-mingw-static/lib
          Write-Host "Printing vcpkg logs..."
          if (Test-Path vcpkg_install.log) {
            Write-Host "Contents of vcpkg_install.log:"
            Get-Content vcpkg_install.log
          }
          exit 1
        }
        Write-Host "vcpkg installation completed successfully"
      shell: powershell

    - name: Upload vcpkg logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs
        path: |
          vcpkg_install.log
        if-no-files-found: warn

    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-mingw-static/lib"
        $includeDir = "C:/vcpkg/installed/x64-mingw-static/include"
        $libs = @("libsqlite3.a", "libzip.a", "libzlib.a", "libbz2.a", "libcurl.a", "libssl.a", "libcrypto.a")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h", "openssl/ssl.h", "openssl/crypto.h")
        $missing = @()
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib")) {
            $missing += "$lib"
          }
        }
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) {
            $missing += $header
          }
        }
        if ($missing) {
          Write-Host "Error: Missing libraries or header files: $missing"
          Write-Host "Contents of directory ${libDir}:"
          dir ${libDir}
          Write-Host "Contents of directory ${includeDir}:"
          dir ${includeDir}
          Write-Host "Contents of directory ${includeDir}/curl:"
          dir ${includeDir}/curl
          Write-Host "Contents of directory ${includeDir}/openssl:"
          dir ${includeDir}/openssl
          exit 1
        }
        if (-not (Test-Path $libDir)) {
          Write-Host "Error: Directory $libDir does not exist"
          exit 1
        }
        Write-Host "Listing all .a files in $libDir"
        Get-ChildItem -Path $libDir -Filter *.a
        Write-Host "All vcpkg dependencies verified"
      shell: powershell

    - name: Debug project structure
      run: |
        Write-Host "Listing contents of project root:"
        dir D:\a\Stealer-DeadCode\Stealer-DeadCode
        Write-Host "Listing contents of ui directory (if exists):"
        dir D:\a\Stealer-DeadCode\Stealer-DeadCode\ui -ErrorAction SilentlyContinue
        Write-Host "Listing contents of src directory (if exists):"
        dir D:\a\Stealer-DeadCode\Stealer-DeadCode\src -ErrorAction SilentlyContinue
      shell: powershell

    - name: Verify project structure
      run: |
        cd Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Listing contents of project root:"
        dir .
        if (-not (Test-Path ui/DeadCode.pro)) {
          Write-Host "Error: DeadCode.pro not found in ui/"
          dir ui -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path src/main.cpp)) {
          Write-Host "Error: main.cpp not found in src/"
          dir src -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.ui)) {
          Write-Host "Error: mainwindow.ui not found in ui/"
          dir ui -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.cpp)) {
          Write-Host "Error: mainwindow.cpp not found in ui/"
          dir ui -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.h)) {
          Write-Host "Error: mainwindow.h not found in ui/"
          dir ui -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path src/build_key.h)) {
          Write-Host "Error: build_key.h not found in src/"
          dir src -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path src/polymorphic_code.h)) {
          Write-Host "Error: polymorphic_code.h not found in src/"
          dir src -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path src/junk_code.h)) {
          Write-Host "Error: junk_code.h not found in src/"
          dir src -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path src/stealerworker.h)) {
          Write-Host "Error: stealerworker.h not found in src/"
          dir src -ErrorAction SilentlyContinue
          exit 1
        }
        Write-Host "Creating build directory if it doesn't exist..."
        New-Item -Path build -ItemType Directory -Force
        Write-Host "Creating release directory if it doesn't exist..."
        New-Item -Path release -ItemType Directory -Force
        Write-Host "Verifying write access to build directory..."
        $testFile = "build/test_write.txt"
        try {
          Set-Content -Path $testFile -Value "Test write access"
          Remove-Item -Path $testFile
          Write-Host "Write access to build directory verified"
        } catch {
          Write-Host "Error: No write access to build directory"
          exit 1
        }
        Write-Host "Verifying write access to release directory..."
        $testFile = "release/test_write.txt"
        try {
          Set-Content -Path $testFile -Value "Test write access"
          Remove-Item -Path $testFile
          Write-Host "Write access to release directory verified"
        } catch {
          Write-Host "Error: No write access to release directory"
          exit 1
        }
        Write-Host "Project structure verified"
      shell: powershell

    - name: Verify and generate UI files
      run: |
        cd Stealer-DeadCode
        Write-Host "Checking mainwindow.ui for validity and generating ui_mainwindow.h..."
        $uicPath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/uic.exe"
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath. Searching for uic.exe..."
          $uicPath = (Get-ChildItem -Path C:/Qt -Filter uic.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $uicPath) {
            Write-Host "Error: uic.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found uic.exe at $uicPath"
        }
        Write-Host "Generating ui_mainwindow.h from ui/mainwindow.ui..."
        & $uicPath ui/mainwindow.ui -o release/ui_mainwindow.h 2>&1 | Tee-Object -FilePath "uic_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mainwindow.ui is invalid. Check the logs for details."
          if (Test-Path uic_output.log) {
            Write-Host "Contents of uic_output.log:"
            Get-Content uic_output.log
          }
          exit 1
        }
        if (-not (Test-Path release/ui_mainwindow.h)) {
          Write-Host "Error: ui_mainwindow.h was not generated"
          dir release
          exit 1
        }
        Write-Host "mainwindow.ui is valid and ui_mainwindow.h generated successfully"
      shell: powershell

    - name: Configure and build
      run: |
        Write-Host "Setting up temporary directory..."
        $tempDir = "C:/Temp"
        if (-not (Test-Path $tempDir)) {
          New-Item -Path $tempDir -ItemType Directory -Force
        }
        $env:TEMP = $tempDir
        $env:TMP = $tempDir
        Write-Host "TEMP set to: $env:TEMP"
        Write-Host "TMP set to: $env:TMP"

        $env:Path = "C:/Qt/Qt/5.15.2/mingw81_64/bin;C:/vcpkg;" + $env:Path
        Write-Host "Updated PATH: $env:Path"

        cd D:\a\Stealer-DeadCode\Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Listing contents of current directory:"
        dir .
        if (-not (Test-Path ui/DeadCode.pro)) {
          Write-Host "Error: DeadCode.pro not found in ui/"
          exit 1
        }
        Write-Host "Running qmake..."
        C:/Qt/Qt/5.15.2/mingw81_64/bin/qmake.exe ui/DeadCode.pro 2>&1 | Tee-Object -FilePath "qmake_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed. Check qmake_output.log for details."
          if (Test-Path qmake_output.log) {
            Get-Content qmake_output.log
          }
          exit 1
        }
        Write-Host "Running mingw32-make..."
        C:/Qt/Qt/5.15.2/mingw81_64/bin/mingw32-make.exe -j4 2>&1 | Tee-Object -FilePath "make_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make failed. Check make_output.log for details."
          if (Test-Path make_output.log) {
            Get-Content make_output.log
          }
          exit 1
        }
        Write-Host "Build completed successfully"
      shell: pwsh

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/uic_output.log
          Stealer-DeadCode/vcpkg_install.log
        if-no-files-found: warn

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: |
          Stealer-DeadCode/build/DeadCode.exe
        if-no-files-found: error

    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "Stealer-DeadCode/release" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell