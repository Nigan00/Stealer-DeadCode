name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

env:
  VCPKG_COMMIT: "a73c889be74ece2c6654b580133e0e267e879255"  # SHA коммита Update vcpkg-tool to 2024-10-18 (#41650)

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    # Шаг 2: Установка Python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # Шаг 3: Проверка и установка Chocolatey
    - name: Check and Install Chocolatey
      run: |
        Write-Host "Checking for existing Chocolatey installation..."
        $chocoPath = "C:\ProgramData\Chocolatey\bin\choco.exe"
        if (Test-Path $chocoPath) {
          Write-Host "Chocolatey is already installed at $chocoPath. Upgrading Chocolatey..."
          & $chocoPath upgrade chocolatey -y --force --execution-timeout 600
          if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
            Write-Host "Error: Failed to upgrade Chocolatey (exit code: $LASTEXITCODE)"
            exit 1
          }
        } else {
          Write-Host "Chocolatey not found. Installing Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to install Chocolatey"
            exit 1
          }
        }
        Write-Host "Verifying Chocolatey installation..."
        & $chocoPath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Chocolatey is not functioning correctly"
          exit 1
        }
        Write-Host "Refreshing environment variables..."
        Import-Module "$env:ChocolateyInstall/helpers/chocolateyProfile.psm1" -ErrorAction SilentlyContinue
        refreshenv
        Write-Host "Chocolatey setup completed successfully"
      shell: powershell

    # Шаг 4: Установка 7-Zip
    - name: Install 7-Zip
      run: |
        Write-Host "Installing 7-Zip via Chocolatey..."
        choco install 7zip -y --force --execution-timeout 600
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Failed to install 7-Zip via Chocolatey (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Refreshing environment variables..."
        Import-Module "$env:ChocolateyInstall/helpers/chocolateyProfile.psm1" -ErrorAction SilentlyContinue
        refreshenv
        Write-Host "7-Zip installation completed"
      shell: powershell

    # Шаг 5: Проверка доступных версий aqtinstall
    - name: Check available aqtinstall versions
      run: |
        Write-Host "Checking available versions of aqtinstall..."
        python -m pip install --upgrade pip
        python -m pip index versions aqtinstall
      shell: powershell

    # Шаг 6: Установка зависимостей Python для aqtinstall
    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install py7zr==0.22.0 aqtinstall==3.2.1 requests==2.32.3 beautifulsoup4==4.12.3
        python -m aqt version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Python dependencies. Check the logs above for details."
          exit 1
        }
        Write-Host "Python dependencies installed successfully."
      shell: powershell

    # Шаг 7: Кэширование Qt
    - name: Cache Qt
      uses: actions/cache@v4
      with:
        path: C:/Qt
        key: qt-5.15.2-${{ runner.os }}-mingw81_64-${{ github.event.inputs.cache-buster || '1' }}-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          qt-5.15.2-${{ runner.os }}-mingw81_64-

    # Шаг 8: Очистка директории Qt перед установкой
    - name: Clean Qt directory
      run: |
        Write-Host "Cleaning Qt directory..."
        if (Test-Path -Path "C:/Qt") {
          Remove-Item -Path "C:/Qt" -Recurse -Force -ErrorAction SilentlyContinue
        }
        Write-Host "Qt directory cleaned."
      shell: powershell

    # Шаг 9: Проверка доступных архитектур и модулей Qt
    - name: Check available Qt architectures and modules
      run: |
        Write-Host "Checking available architectures for Qt 5.15.2..."
        python -m aqt list-qt windows desktop --arch 5.15.2
        Write-Host "Checking available modules for Qt 5.15.2 win64_mingw81..."
        python -m aqt list-qt windows desktop --modules 5.15.2 win64_mingw81
      shell: powershell

    # Шаг 10: Установка Qt 5.15.2 через aqtinstall
    - name: Install Qt 5.15.2 via aqtinstall
      run: |
        Write-Host "Installing Qt 5.15.2 with MinGW 8.1..."
        # Проверка версии aqtinstall
        python -m aqt version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to verify aqtinstall version"
          exit 1
        }

        # Установка Qt с использованием явной команды вместо массива
        python -m aqt install-qt `
          --outputdir "C:/Qt" `
          --base "http://mirrors.ocf.berkeley.edu/qt/" `
          --timeout 600 `
          --external "7z" `
          --verbose `
          windows desktop 5.15.2 win64_mingw81 `
          -m qtbase qttools qtsvg qtdeclarative qtquickcontrols qtquickcontrols2 qtgraphicaleffects qtimageformats qtsql qtquick qtquicktimeline qtquick3d qtwinextras qtnetwork qtwidgets qtcore qtgui qtqml `
          2>&1 | Tee-Object -FilePath "qt_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Qt 5.15.2 via aqtinstall"
          Get-Content qt_install.log
          exit 1
        }

        # Проверка наличия ключевых файлов Qt
        $qtFiles = @("C:/Qt/5.15.2/mingw81_64/bin/qmake.exe", "C:/Qt/5.15.2/mingw81_64/bin/Qt5Core.dll")
        foreach ($file in $qtFiles) {
          if (-not (Test-Path $file)) {
            Write-Host "Error: Qt installation incomplete, $file not found"
            dir C:/Qt -Recurse
            exit 1
          }
        }
        Write-Host "Qt 5.15.2 installation completed."
      shell: powershell

    # Шаг 11: Установка MinGW 8.1 через aqtinstall
    - name: Install MinGW 8.1 via aqtinstall
      run: |
        Write-Host "Installing MinGW 8.1 (GCC 8) for C++17 support..."
        python -m aqt install-tool windows desktop tools_mingw qt.tools.win64_mingw810 -O C:/Qt --external 7z --timeout 600 --verbose 2>&1 | Tee-Object -FilePath "mingw_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install MinGW 8.1 via aqtinstall"
          Get-Content mingw_install.log
          exit 1
        }
        if (-not (Test-Path "C:/Qt/Tools/mingw810_64/bin/g++.exe")) {
          Write-Host "Error: MinGW installation incomplete, g++.exe not found"
          dir C:/Qt/Tools -Recurse
          exit 1
        }
        # Обновление PATH для последующих шагов
        $env:Path = "C:/Qt/Tools/mingw810_64/bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "MinGW 8.1 installation completed."
      shell: powershell

    # Шаг 12: Проверка установки Qt и MinGW
    - name: Verify Qt and MinGW installation
      run: |
        Write-Host "Verifying Qt and MinGW installation..."
        $qmakePath = "C:/Qt/5.15.2/mingw81_64/bin/qmake.exe"
        $uicPath = "C:/Qt/5.15.2/mingw81_64/bin/uic.exe"
        $mingwBinPath = "C:/Qt/Tools/mingw810_64/bin"
        $gppPath = "$mingwBinPath/g++.exe"
        $makePath = "$mingwBinPath/mingw32-make.exe"
        $qtCoreDll = "C:/Qt/5.15.2/mingw81_64/bin/Qt5Core.dll"

        foreach ($path in @($qmakePath, $uicPath, $gppPath, $makePath, $qtCoreDll)) {
          if (-not (Test-Path $path)) {
            Write-Host "Error: $path not found"
            dir C:/Qt -Recurse
            exit 1
          }
        }

        $env:Path = "C:/Qt/5.15.2/mingw81_64/bin;$mingwBinPath;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)

        Write-Host "Qt version:"
        & $qmakePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed"
          exit 1
        }
        Write-Host "g++ version:"
        & $gppPath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed"
          exit 1
        }
        Write-Host "mingw32-make version:"
        & $makePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed"
          exit 1
        }
        Write-Host "Qt and MinGW setup verified successfully"
      shell: powershell

    # Шаг 13: Кэширование Strawberry Perl
    - name: Cache Strawberry Perl
      uses: actions/cache@v4
      with:
        path: C:/Strawberry
        key: strawberry-perl-${{ runner.os }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          strawberry-perl-${{ runner.os }}-

    # Шаг 14: Установка Perl
    - name: Install Perl via Chocolatey
      run: |
        Write-Host "Installing Strawberry Perl via Chocolatey..."
        choco install strawberryperl -y --force --execution-timeout 600
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Failed to install Perl via Chocolatey (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Refreshing environment variables..."
        Import-Module "$env:ChocolateyInstall/helpers/chocolateyProfile.psm1" -ErrorAction SilentlyContinue
        refreshenv
        Write-Host "Perl installation completed"
      shell: powershell

    # Шаг 15: Кэширование vcpkg
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          C:/vcpkg
          C:/vcpkg/installed
        key: vcpkg-${{ env.VCPKG_COMMIT }}-${{ hashFiles('Stealer-DeadCode/vcpkg.json') }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          vcpkg-${{ env.VCPKG_COMMIT }}-

    # Шаг 16: Очистка и обновление vcpkg
    - name: Clean and update vcpkg
      run: |
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg repository..."
          & git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to clone vcpkg repository"
            exit 1
          }
        }
        Set-Location -Path C:/vcpkg
        $commit = $env:VCPKG_COMMIT
        Write-Host "Checking out commit $commit..."
        & git fetch origin
        & git checkout $commit
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to checkout commit $commit"
          exit 1
        }
        Write-Host "Running bootstrap-vcpkg..."
        & ./bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed"
          exit 1
        }
        Write-Host "vcpkg version:"
        & ./vcpkg.exe --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to get vcpkg version"
          exit 1
        }
      shell: powershell

    # Шаг 17: Проверка и обновление vcpkg.json
    - name: Check and update vcpkg.json
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Checking vcpkg.json..."
        if (-not (Test-Path vcpkg.json)) {
          Write-Host "Error: vcpkg.json not found"
          dir .
          exit 1
        }
        Write-Host "Current vcpkg.json content:"
        Get-Content vcpkg.json
        Write-Host "Updating builtin-baseline and OpenSSL version in vcpkg.json..."
        $vcpkgJson = Get-Content -Path vcpkg.json -Raw | ConvertFrom-Json
        $commit = $env:VCPKG_COMMIT
        if ($vcpkgJson.PSObject.Properties.Match('builtin-baseline')) {
          $vcpkgJson.'builtin-baseline' = $commit
        } else {
          $vcpkgJson | Add-Member -MemberType NoteProperty -Name "builtin-baseline" -Value $commit
        }
        $opensslDependency = $vcpkgJson.dependencies | Where-Object { $_.name -eq "openssl" }
        if ($opensslDependency) {
          $opensslDependency.'version>=' = "1.1.1n"
        } else {
          Write-Host "Error: OpenSSL dependency not found in vcpkg.json"
          exit 1
        }
        $vcpkgJson | ConvertTo-Json -Depth 10 | Set-Content -Path vcpkg.json -Encoding UTF8
        Write-Host "Updated vcpkg.json content:"
        Get-Content vcpkg.json
      shell: powershell

    # Шаг 18: Проверка доступных версий библиотек
    - name: Check available library versions
      run: |
        Set-Location -Path C:/vcpkg
        Write-Host "Checking available versions of required libraries..."
        $libraries = @("libzip", "sqlite3", "zlib", "bzip2", "curl", "openssl")
        foreach ($lib in $libraries) {
          Write-Host "Searching for $lib..."
          & ./vcpkg.exe search $lib
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to search for $lib"
            exit 1
          }
        }
      shell: powershell

    # Шаг 19: Установка vcpkg и зависимостей
    - name: Install vcpkg and dependencies
      run: |
        Set-Location -Path C:/vcpkg
        Write-Host "Integrating vcpkg..."
        & ./vcpkg.exe integrate install
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Warning: vcpkg integrate install failed, proceeding without integration"
        }
        $env:Path = "C:/vcpkg;" + $env:Path
        $env:VCPKG_ROOT = "C:/vcpkg"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("VCPKG_ROOT", $env:VCPKG_ROOT, [System.EnvironmentVariableTarget]::Process)
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Installing vcpkg dependencies with triplet x64-mingw-dynamic..."
        & C:/vcpkg/vcpkg.exe install --triplet x64-mingw-dynamic --clean-after-build --x-install-root=C:/vcpkg/installed --debug 2>&1 | Tee-Object -FilePath "vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed"
          Get-Content vcpkg_install.log
          exit 1
        }
        Write-Host "vcpkg installation completed successfully"
      shell: powershell

    # Шаг 20: Переименование DLL
    - name: Rename vcpkg DLLs
      run: |
        Set-Location -Path C:/vcpkg/installed/x64-mingw-dynamic/bin
        Write-Host "Renaming vcpkg DLLs to match expected names..."
        $dllRenames = @{
          "libzlib1.dll" = "zlib1.dll"
          "libbz2.dll" = "bz2.dll"
          "libssl-1_1-x64.dll" = "libssl.dll"
          "libcrypto-1_1-x64.dll" = "libcrypto.dll"
        }
        foreach ($oldName in $dllRenames.Keys) {
          $newName = $dllRenames[$oldName]
          if (Test-Path $oldName) {
            Rename-Item -Path $oldName -NewName $newName
            Write-Host "Renamed $oldName to $newName"
          }
        }
        Write-Host "Listing contents of bin directory after renaming:"
        dir
      shell: powershell

    # Шаг 21: Загрузка логов vcpkg в случае ошибки
    - name: Upload vcpkg logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs
        path: Stealer-DeadCode/vcpkg_install.log
        if-no-files-found: warn

    # Шаг 22: Проверка установки vcpkg
    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-mingw-dynamic/lib"
        $binDir = "C:/vcpkg/installed/x64-mingw-dynamic/bin"
        $includeDir = "C:/vcpkg/installed/x64-mingw-dynamic/include"
        $libs = @("libsqlite3.dll.a", "libzip.dll.a", "libzlib.dll.a", "libbz2.dll.a", "libcurl.dll.a", "libssl.dll.a", "libcrypto.dll.a")
        $dlls = @("libsqlite3.dll", "libzip.dll", "zlib1.dll", "bz2.dll", "libcurl.dll", "libssl.dll", "libcrypto.dll")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h", "openssl/ssl.h", "openssl/crypto.h")
        $missing = @()

        Write-Host "Checking libraries in ${libDir}..."
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib")) {
            $missing += "$lib"
          }
        }

        Write-Host "Checking DLLs in ${binDir}..."
        foreach ($dll in $dlls) {
          if (-not (Test-Path "$binDir/$dll")) {
            $missing += "$dll"
          }
        }

        Write-Host "Checking headers in ${includeDir}..."
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) {
            $missing += $header
          }
        }

        if ($missing) {
          Write-Host "Error: Missing libraries, DLLs, or header files: $missing"
          dir $libDir -Recurse -ErrorAction SilentlyContinue
          dir $binDir -Recurse -ErrorAction SilentlyContinue
          dir $includeDir -Recurse -ErrorAction SilentlyContinue
          exit 1
        }
        Write-Host "All vcpkg dependencies verified as dynamic"
      shell: powershell

    # Шаг 23: Проверка структуры проекта
    - name: Verify project structure
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"
        $requiredFiles = @(
          "ui/DeadCode.pro",
          "src/main.cpp",
          "ui/mainwindow.ui",
          "ui/mainwindow.cpp",
          "ui/mainwindow.h",
          "src/build_key.h",
          "src/polymorphic_code.h",
          "src/junk_code.h",
          "src/stealerworker.h",
          "src/compat.h",
          "icon.rc",
          "icon.ico"
        )
        $missingFiles = @()
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            $missingFiles += $file
          }
        }
        if ($missingFiles) {
          Write-Host "Error: Missing required files: $missingFiles"
          dir ui -ErrorAction SilentlyContinue
          dir src -ErrorAction SilentlyContinue
          dir . -ErrorAction SilentlyContinue
          exit 1
        }
        New-Item -Path build -ItemType Directory -Force
        New-Item -Path build/release -ItemType Directory -Force
        Write-Host "Project structure verified"
      shell: powershell

    # Шаг 24: Исправление кодировки icon.rc
    - name: Fix icon.rc encoding
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Fixing encoding of icon.rc..."
        $content = Get-Content -Path icon.rc -Raw -Encoding UTF8
        Set-Content -Path icon.rc -Value $content -NoNewline -Encoding ASCII
        Write-Host "icon.rc encoding fixed to ASCII"
      shell: powershell

    # Шаг 25: Генерация UI-файлов
    - name: Generate UI files
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Generating ui_mainwindow.h from ui/mainwindow.ui..."
        $uicPath = "C:/Qt/5.15.2/mingw81_64/bin/uic.exe"
        $outputPath = "build/release/ui_mainwindow.h"
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath"
          exit 1
        }
        & $uicPath ui/mainwindow.ui -o $outputPath 2>&1 | Tee-Object -FilePath "uic_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: uic.exe failed"
          Get-Content uic_output.log
          exit 1
        }
        if (-not (Test-Path $outputPath)) {
          Write-Host "Error: $outputPath was not generated"
          exit 1
        }
        Write-Host "ui_mainwindow.h generated successfully at $outputPath"
      shell: powershell

    # Шаг 26: Конфигурация и сборка проекта
    - name: Configure and build
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        $tempDir = [System.IO.Path]::GetTempPath()
        $env:TEMP = $tempDir
        $env:TMP = $tempDir
        Write-Host "TEMP set to: $env:TEMP"
        Write-Host "TMP set to: $env:TMP"

        $env:Path = "C:/Qt/5.15.2/mingw81_64/bin;C:/Qt/Tools/mingw810_64/bin;C:/vcpkg;" + $env:Path
        $env:VCPKG_ROOT = "C:/vcpkg"
        $env:QML2_IMPORT_PATH = "C:/Qt/5.15.2/mingw81_64/qml"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("VCPKG_ROOT", $env:VCPKG_ROOT, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("QML2_IMPORT_PATH", $env:QML2_IMPORT_PATH, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Updated PATH: $env:Path"
        Write-Host "VCPKG_ROOT: $env:VCPKG_ROOT"
        Write-Host "QML2_IMPORT_PATH: $env:QML2_IMPORT_PATH"

        $buildDate = Get-Date -Format "yyyy-MM-dd"
        $buildVersion = git rev-parse --short HEAD
        if (-not $buildVersion) {
          $buildVersion = "unknown"
        }
        Write-Host "Build Date: $buildDate"
        Write-Host "Build Version: $buildVersion"

        Set-Location -Path build
        Write-Host "Running qmake with vcpkg integration..."
        $qmakePath = "C:/Qt/5.15.2/mingw81_64/bin/qmake.exe"
        $qmakeArgs = @(
          "../ui/DeadCode.pro",
          "CONFIG+=release",
          "QMAKE_CXXFLAGS+=-Wno-attributes",
          "DEFINES+=BUILD_DATE=`"$buildDate`"",
          "DEFINES+=BUILD_VERSION=`"$buildVersion`"",
          "-spec", "win32-g++",
          "INCLUDEPATH+=C:/vcpkg/installed/x64-mingw-dynamic/include",
          "LIBS+=-LC:/vcpkg/installed/x64-mingw-dynamic/lib",
          "LIBS+=-lstdc++fs"
        )
        & $qmakePath $qmakeArgs 2>&1 | Tee-Object -FilePath "../qmake_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed"
          Get-Content ../qmake_output.log
          exit 1
        }

        Write-Host "Running mingw32-make with parallel jobs..."
        $makePath = "C:/Qt/Tools/mingw810_64/bin/mingw32-make.exe"
        & $makePath -f Makefile.Release -j4 2>&1 | Tee-Object -FilePath "../make_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make failed"
          Get-Content ../make_output.log
          exit 1
        }

        if (-not (Test-Path release/DeadCode.exe)) {
          Write-Host "Error: DeadCode.exe was not generated in build/release/"
          dir .
          dir release
          exit 1
        }
        Write-Host "Build completed successfully"
      shell: powershell

    # Шаг 27: Тестирование запуска DeadCode.exe
    - name: Test run DeadCode.exe
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode/build
        $env:Path = "C:/Qt/5.15.2/mingw81_64/bin;C:/Qt/Tools/mingw810_64/bin;C:/vcpkg/installed/x64-mingw-dynamic/bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Running DeadCode.exe..."
        try {
          Start-Process -FilePath "release/DeadCode.exe" -NoNewWindow -Wait -RedirectStandardOutput "deadcode_output.log" -RedirectStandardError "deadcode_error.log"
          Write-Host "DeadCode.exe executed successfully."
          Write-Host "Standard Output:"
          Get-Content "deadcode_output.log" -ErrorAction SilentlyContinue
          Write-Host "Standard Error:"
          Get-Content "deadcode_error.log" -ErrorAction SilentlyContinue
        } catch {
          Write-Host "Error: Failed to run DeadCode.exe"
          Get-Content "deadcode_output.log" -ErrorAction SilentlyContinue
          Get-Content "deadcode_error.log" -ErrorAction SilentlyContinue
          exit 1
        }
      shell: powershell

    # Шаг 28: Копирование необходимых DLL и плагинов Qt
    - name: Copy Qt DLLs and dependencies
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode/build
        Write-Host "Copying Qt DLLs and dependencies to release directory..."
        $qtBinDir = "C:/Qt/5.15.2/mingw81_64/bin"
        $mingwBinDir = "C:/Qt/Tools/mingw810_64/bin"
        $qtPluginsDir = "C:/Qt/5.15.2/mingw81_64/plugins"
        $qtQmlDir = "C:/Qt/5.15.2/mingw81_64/qml"
        $vcpkgBinDir = "C:/vcpkg/installed/x64-mingw-dynamic/bin"

        $requiredQtDlls = @(
          "Qt5Core.dll",
          "Qt5Gui.dll",
          "Qt5Network.dll",
          "Qt5Widgets.dll",
          "Qt5Svg.dll",
          "Qt5Declarative.dll",
          "Qt5Quick.dll",
          "Qt5QuickControls2.dll",
          "Qt5QuickWidgets.dll",
          "Qt5Sql.dll",
          "Qt5Qml.dll",
          "Qt5QmlModels.dll",
          "Qt5QmlWorkerScript.dll"
        )

        $requiredMingwDlls = @(
          "libwinpthread-1.dll",
          "libgcc_s_seh-1.dll",
          "libstdc++-6.dll"
        )

        $requiredVcpkgDlls = @(
          "libsqlite3.dll",
          "libzip.dll",
          "zlib1.dll",
          "bz2.dll",
          "libcurl.dll",
          "libssl.dll",
          "libcrypto.dll"
        )

        $dirs = @(
          @{ Dlls = $requiredQtDlls; Source = $qtBinDir },
          @{ Dlls = $requiredMingwDlls; Source = $mingwBinDir },
          @{ Dlls = $requiredVcpkgDlls; Source = $vcpkgBinDir }
        )
        foreach ($dir in $dirs) {
          foreach ($dll in $dir.Dlls) {
            if (Test-Path "$($dir.Source)/$dll") {
              Copy-Item -Path "$($dir.Source)/$dll" -Destination release/ -Force
              Write-Host "Copied $dll to release directory"
            } else {
              Write-Host "Error: $dll not found in $($dir.Source)"
              exit 1
            }
          }
        }

        if (Test-Path "$qtPluginsDir") {
          $pluginDirs = @(
            @{ Source = "platforms/qwindows.dll"; Dest = "platforms" },
            @{ Source = "styles/qwindowsvistastyle.dll"; Dest = "styles" },
            @{ Source = "imageformats/*.dll"; Dest = "imageformats" },
            @{ Source = "quick/*.dll"; Dest = "quick" },
            @{ Source = "qmltooling/*.dll"; Dest = "qmltooling" },
            @{ Source = "sqldrivers/*.dll"; Dest = "sqldrivers" }
          )
          foreach ($plugin in $pluginDirs) {
            if (Test-Path "$qtPluginsDir/$($plugin.Source)") {
              New-Item -Path "release/$($plugin.Dest)" -ItemType Directory -Force
              Copy-Item -Path "$qtPluginsDir/$($plugin.Source)" -Destination "release/$($plugin.Dest)/" -Force -ErrorAction SilentlyContinue
              Write-Host "Copied Qt plugin $($plugin.Source)"
            } else {
              Write-Host "Warning: Qt plugin $($plugin.Source) not found in $qtPluginsDir"
            }
          }
        } else {
          Write-Host "Error: Qt plugins directory not found at $qtPluginsDir"
          exit 1
        }

        if (Test-Path "$qtQmlDir") {
          $qmlModules = @(
            "QtQml",
            "QtQuick",
            "QtQuick.2",
            "QtQuick.Controls",
            "QtQuick.Controls.2",
            "QtQuick.Layouts",
            "QtQuick.Templates.2",
            "QtQuick.Window.2",
            "QtGraphicalEffects",
            "Qt"
          )
          foreach ($module in $qmlModules) {
            if (Test-Path "$qtQmlDir/$module") {
              New-Item -Path "release/$module" -ItemType Directory -Force
              Copy-Item -Path "$qtQmlDir/$module/*" -Destination "release/$module/" -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "Copied QML module $module"
            } else {
              Write-Host "Warning: QML module $module not found in $qtQmlDir"
            }
          }
        } else {
          Write-Host "Error: QML directory not found at $qtQmlDir"
          exit 1
        }

        Write-Host "Listing contents of release directory:"
        dir release -Recurse
      shell: powershell

    # Шаг 29: Загрузка логов сборки в случае ошибки
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qt_install.log
          Stealer-DeadCode/mingw_install.log
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/uic_output.log
          Stealer-DeadCode/vcpkg_install.log
          Stealer-DeadCode/build/deadcode_output.log
          Stealer-DeadCode/build/deadcode_error.log
        if-no-files-found: warn

    # Шаг 30: Загрузка артефакта
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: |
          Stealer-DeadCode/build/release/DeadCode.exe
          Stealer-DeadCode/build/release/*.dll
          Stealer-DeadCode/build/release/platforms/qwindows.dll
          Stealer-DeadCode/build/release/styles/qwindowsvistastyle.dll
          Stealer-DeadCode/build/release/imageformats/*.dll
          Stealer-DeadCode/build/release/quick/*.dll
          Stealer-DeadCode/build/release/qmltooling/*.dll
          Stealer-DeadCode/build/release/sqldrivers/*.dll
          Stealer-DeadCode/build/release/QtQml/**/*
          Stealer-DeadCode/build/release/QtQuick/**/*
          Stealer-DeadCode/build/release/QtQuick.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Controls/**/*
          Stealer-DeadCode/build/release/QtQuick.Controls.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Layouts/**/*
          Stealer-DeadCode/build/release/QtQuick.Templates.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Window.2/**/*
          Stealer-DeadCode/build/release/QtGraphicalEffects/**/*
          Stealer-DeadCode/build/release/Qt/**/*
        if-no-files-found: error

    # Шаг 31: Очистка
    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell