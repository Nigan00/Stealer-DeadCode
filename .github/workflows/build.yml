name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

env:
  VCPKG_COMMIT: "a73c889be74ece2c6654b580133e0e267e879255"  # SHA коммита Update vcpkg-tool to 2024-10-18 (#41650)

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    # Шаг 2: Установка Python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # Шаг 3: Проверка и установка Chocolatey
    - name: Check and Install Chocolatey
      run: |
        Write-Host "Checking for existing Chocolatey installation..."
        $chocoPath = "C:\ProgramData\Chocolatey\bin\choco.exe"
        if (Test-Path $chocoPath) {
          Write-Host "Chocolatey is already installed at $chocoPath. Upgrading Chocolatey..."
          & $chocoPath upgrade chocolatey -y --force --execution-timeout=600
          if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
            Write-Host "Error: Failed to upgrade Chocolatey (exit code: $LASTEXITCODE)"
            exit 1
          }
        } else {
          Write-Host "Chocolatey not found. Installing Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to install Chocolatey (exit code: $LASTEXITCODE)"
            exit 1
          }
        }
        Write-Host "Verifying Chocolatey installation..."
        & $chocoPath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Chocolatey verification failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Updating environment variables in current session..."
        $env:ChocolateyInstall = "C:\ProgramData\chocolatey"
        $env:Path = "$env:ChocolateyInstall\bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("ChocolateyInstall", $env:ChocolateyInstall, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Chocolatey setup completed successfully. Version:"
        & $chocoPath --version
      shell: powershell

    # Шаг 4: Установка 7-Zip
    - name: Install 7-Zip
      run: |
        Write-Host "Installing 7-Zip via Chocolatey..."
        choco install 7zip -y --force --execution-timeout=600
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Failed to install 7-Zip (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Refreshing environment variables..."
        $env:Path = "C:\Program Files\7-Zip;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "7-Zip installation completed"
      shell: powershell

    # Шаг 5: Проверка доступных версий aqtinstall
    - name: Check available aqtinstall versions
      run: |
        Write-Host "Checking available versions of aqtinstall..."
        python -m pip install --upgrade pip
        python -m pip index versions aqtinstall
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to check aqtinstall versions (exit code: $LASTEXITCODE)"
          exit 1
        }
      shell: powershell

    # Шаг 6: Установка зависимостей Python для aqtinstall
    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install py7zr aqtinstall requests beautifulsoup4
        python -m aqt version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to install Python dependencies (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Python dependencies installed successfully"
      shell: powershell

    # Шаг 7: Кэширование Qt
    - name: Cache Qt
      uses: actions/cache@v4
      with:
        path: C:/Qt
        key: qt-5.15.2-${{ runner.os }}-win64_mingw81-${{ github.event.inputs.cache-buster || '1' }}-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          qt-5.15.2-${{ runner.os }}-win64_mingw81-

    # Шаг 8: Очистка директории Qt перед установкой
    - name: Clean Qt directory
      run: |
        Write-Host "Cleaning Qt directory..."
        Remove-Item -Path "C:/Qt" -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "Qt directory cleaned"
      shell: powershell

    # Шаг 9: Проверка доступных архитектур и модулей Qt
    - name: Check available Qt architectures and modules
      run: |
        Write-Host "Checking available architectures for Qt 5.15.2..."
        python -m aqt list-qt windows desktop --arch 5.15.2
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to list architectures (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Checking available modules for Qt 5.15.2 win64_mingw81..."
        python -m aqt list-qt windows desktop --modules 5.15.2 win64_mingw81
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to list modules for win64_mingw81 (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Checking available Qt versions..."
        python -m aqt list-qt windows desktop
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to list Qt versions (exit code: $LASTEXITCODE)"
          exit 1
        }
      shell: powershell

    # Шаг 10: Установка Qt 5.15.2 через aqtinstall
    - name: Install Qt 5.15.2 via aqtinstall
      run: |
        echo "Installing Qt 5.15.2 with MinGW 8.1..."
        python -m aqt version
        if %ERRORLEVEL% NEQ 0 (
          echo "Error: Failed to verify aqtinstall version (exit code: %ERRORLEVEL%)"
          exit 1
        )

        set "QT_MODULES=qtbase qttools qtsvg qtdeclarative qtquickcontrols qtquickcontrols2 qtgraphicaleffects qtimageformats qtsql qtquick qtwinextras"
        set "QT_INSTALL_CMD=python -m aqt install-qt --outputdir C:/Qt --base https://download.qt.io/ --timeout 600 --external 7z windows desktop 5.15.2 win64_mingw81 -m %QT_MODULES%"
        echo "Executing command: %QT_INSTALL_CMD%"

        cmd.exe /C "%QT_INSTALL_CMD%" 2>&1 | tee qt_install.log
        if %ERRORLEVEL% NEQ 0 (
          echo "Error: Failed to install Qt 5.15.2 via aqtinstall (exit code: %ERRORLEVEL%)"
          type qt_install.log
          exit 1
        )

        for %%f in ("C:\Qt\5.15.2\win64_mingw81\bin\qmake.exe" "C:\Qt\5.15.2\win64_mingw81\bin\Qt5Core.dll") do (
          if not exist %%f (
            echo "Error: Qt installation incomplete, %%f not found"
            dir C:\Qt /s /p
            exit 1
          )
        )
        echo "Qt 5.15.2 installation completed"
      shell: cmd

    # Шаг 11: Установка MinGW 8.1 через aqtinstall
    - name: Install MinGW 8.1 via aqtinstall
      run: |
        echo "Installing MinGW 8.1 (GCC 8) for C++17 support..."
        python -m aqt install-tool windows desktop tools_mingw qt.tools.win64_mingw810 -O C:/Qt --external 7z --timeout 600 --verbose 2>&1 | tee mingw_install.log
        if %ERRORLEVEL% NEQ 0 (
          echo "Error: Failed to install MinGW 8.1 via aqtinstall (exit code: %ERRORLEVEL%)"
          type mingw_install.log
          exit 1
        )
        if not exist "C:/Qt/Tools/mingw810_64/bin/g++.exe" (
          echo "Error: MinGW installation incomplete, g++.exe not found"
          dir C:/Qt/Tools /s
          exit 1
        )
        echo "MinGW 8.1 installation completed"
      shell: cmd

    # Шаг 12: Проверка установки Qt и MinGW
    - name: Verify Qt and MinGW installation
      run: |
        Write-Host "Verifying Qt and MinGW installation..."
        $paths = @(
          "C:/Qt/5.15.2/win64_mingw81/bin/qmake.exe",
          "C:/Qt/5.15.2/win64_mingw81/bin/uic.exe",
          "C:/Qt/Tools/mingw810_64/bin/g++.exe",
          "C:/Qt/Tools/mingw810_64/bin/mingw32-make.exe",
          "C:/Qt/5.15.2/win64_mingw81/bin/Qt5Core.dll"
        )
        foreach ($path in $paths) {
          if (-not (Test-Path $path)) {
            Write-Host "Error: $path not found"
            dir C:/Qt -Recurse
            exit 1
          }
        }

        $env:Path = "C:/Qt/5.15.2/win64_mingw81/bin;C:/Qt/Tools/mingw810_64/bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)

        & "C:/Qt/5.15.2/win64_mingw81/bin/qmake.exe" --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        & "C:/Qt/Tools/mingw810_64/bin/g++.exe" --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        & "C:/Qt/Tools/mingw810_64/bin/mingw32-make.exe" --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Qt and MinGW setup verified successfully"
      shell: powershell

    # Шаг 13: Кэширование Strawberry Perl
    - name: Cache Strawberry Perl
      uses: actions/cache@v4
      with:
        path: C:/Strawberry
        key: strawberry-perl-${{ runner.os }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          strawberry-perl-${{ runner.os }}-

    # Шаг 14: Установка Perl
    - name: Install Perl via Chocolatey
      run: |
        Write-Host "Installing Strawberry Perl via Chocolatey..."
        choco install strawberryperl -y --force --execution-timeout=600
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 3010) {
          Write-Host "Error: Failed to install Perl (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Refreshing environment variables..."
        $env:Path = "C:\Strawberry\perl\bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Perl installation completed"
      shell: powershell

    # Шаг 15: Кэширование vcpkg
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          C:/vcpkg
          C:/vcpkg/installed
        key: vcpkg-${{ env.VCPKG_COMMIT }}-${{ hashFiles('Stealer-DeadCode/vcpkg.json') }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          vcpkg-${{ env.VCPKG_COMMIT }}-

    # Шаг 16: Очистка и обновление vcpkg
    - name: Clean and update vcpkg
      run: |
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg repository..."
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to clone vcpkg repository (exit code: $LASTEXITCODE)"
            exit 1
          }
        }
        Set-Location -Path C:/vcpkg
        Write-Host "Checking out commit $env:VCPKG_COMMIT..."
        git fetch origin
        git checkout $env:VCPKG_COMMIT
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to checkout commit $env:VCPKG_COMMIT (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "Running bootstrap-vcpkg..."
        ./bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed (exit code: $LASTEXITCODE)"
          exit 1
        }
        Write-Host "vcpkg version:"
        ./vcpkg.exe --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to get vcpkg version (exit code: $LASTEXITCODE)"
          exit 1
        }
      shell: powershell

    # Шаг 17: Проверка и обновление vcpkg.json
    - name: Check and update vcpkg.json
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Checking vcpkg.json..."
        if (-not (Test-Path vcpkg.json)) {
          Write-Host "Error: vcpkg.json not found"
          dir .
          exit 1
        }
        Write-Host "Updating builtin-baseline and OpenSSL version in vcpkg.json..."
        $vcpkgJson = Get-Content -Path vcpkg.json -Raw | ConvertFrom-Json
        $vcpkgJson.'builtin-baseline' = $env:VCPKG_COMMIT
        $openssl = $vcpkgJson.dependencies | Where-Object { $_.name -eq "openssl" }
        if ($openssl) {
          $openssl.'version>=' = "1.1.1n"
        } else {
          Write-Host "Error: OpenSSL dependency not found in vcpkg.json"
          exit 1
        }
        $vcpkgJson | ConvertTo-Json -Depth 10 | Set-Content -Path vcpkg.json -Encoding UTF8
        Write-Host "Updated vcpkg.json content:"
        Get-Content vcpkg.json
      shell: powershell

    # Шаг 18: Проверка доступных версий библиотек
    - name: Check available library versions
      run: |
        Set-Location -Path C:/vcpkg
        Write-Host "Checking available versions of required libraries..."
        $libraries = @("libzip", "sqlite3", "zlib", "bzip2", "curl", "openssl")
        foreach ($lib in $libraries) {
          Write-Host "Searching for $lib..."
          ./vcpkg.exe search $lib
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to search for $lib (exit code: $LASTEXITCODE)"
            exit 1
          }
        }
      shell: powershell

    # Шаг 19: Установка vcpkg и зависимостей
    - name: Install vcpkg and dependencies
      run: |
        Set-Location -Path C:/vcpkg
        Write-Host "Integrating vcpkg..."
        ./vcpkg.exe integrate install
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Warning: vcpkg integrate install failed, proceeding without integration"
        }
        $env:Path = "C:/vcpkg;" + $env:Path
        $env:VCPKG_ROOT = "C:/vcpkg"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("VCPKG_ROOT", $env:VCPKG_ROOT, [System.EnvironmentVariableTarget]::Process)
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Installing vcpkg dependencies with triplet x64-mingw-dynamic..."
        C:/vcpkg/vcpkg.exe install --triplet x64-mingw-dynamic --clean-after-build --x-install-root=C:/vcpkg/installed --debug 2>&1 | Tee-Object -FilePath "vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed (exit code: $LASTEXITCODE)"
          Get-Content vcpkg_install.log
          exit 1
        }
        Write-Host "vcpkg installation completed successfully"
      shell: powershell

    # Шаг 20: Переименование DLL
    - name: Rename vcpkg DLLs
      run: |
        Set-Location -Path C:/vcpkg/installed/x64-mingw-dynamic/bin
        Write-Host "Renaming vcpkg DLLs to match expected names..."
        $dllRenames = @{
          "libzlib1.dll" = "zlib1.dll"
          "libbz2.dll" = "bz2.dll"
          "libssl-1_1-x64.dll" = "libssl.dll"
          "libcrypto-1_1-x64.dll" = "libcrypto.dll"
        }
        foreach ($oldName in $dllRenames.Keys) {
          $newName = $dllRenames[$oldName]
          if (Test-Path $oldName) {
            Rename-Item -Path $oldName -NewName $newName
            Write-Host "Renamed $oldName to $newName"
          }
        }
        Write-Host "Listing contents of bin directory after renaming:"
        dir
      shell: powershell

    # Шаг 21: Загрузка логов vcpkg в случае ошибки
    - name: Upload vcpkg logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs
        path: Stealer-DeadCode/vcpkg_install.log
        if-no-files-found: warn

    # Шаг 22: Проверка установки vcpkg
    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-mingw-dynamic/lib"
        $binDir = "C:/vcpkg/installed/x64-mingw-dynamic/bin"
        $includeDir = "C:/vcpkg/installed/x64-mingw-dynamic/include"
        $libs = @("libsqlite3.dll.a", "libzip.dll.a", "libzlib.dll.a", "libbz2.dll.a", "libcurl.dll.a", "libssl.dll.a", "libcrypto.dll.a")
        $dlls = @("libsqlite3.dll", "libzip.dll", "zlib1.dll", "bz2.dll", "libcurl.dll", "libssl.dll", "libcrypto.dll")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h", "openssl/ssl.h", "openssl/crypto.h")
        $missing = @()

        Write-Host "Checking vcpkg installation..."
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib")) { $missing += "$lib" }
        }
        foreach ($dll in $dlls) {
          if (-not (Test-Path "$binDir/$dll")) { $missing += "$dll" }
        }
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) { $missing += "$header" }
        }

        if ($missing) {
          Write-Host "Error: Missing files: $missing"
          dir $libDir -Recurse -ErrorAction SilentlyContinue
          dir $binDir -Recurse -ErrorAction SilentlyContinue
          dir $includeDir -Recurse -ErrorAction SilentlyContinue
          exit 1
        }
        Write-Host "All vcpkg dependencies verified as dynamic"
      shell: powershell

    # Шаг 23: Проверка структуры проекта
    - name: Verify project structure
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        $requiredFiles = @(
          "ui/DeadCode.pro",
          "src/main.cpp",
          "ui/mainwindow.ui",
          "ui/mainwindow.cpp",
          "ui/mainwindow.h",
          "src/build_key.h",
          "src/polymorphic_code.h",
          "src/junk_code.h",
          "src/stealerworker.h",
          "src/compat.h",
          "icon.rc",
          "icon.ico"
        )
        $missingFiles = $requiredFiles | Where-Object { -not (Test-Path $_) }
        if ($missingFiles) {
          Write-Host "Error: Missing required files: $missingFiles"
          dir ui -ErrorAction SilentlyContinue
          dir src -ErrorAction SilentlyContinue
          dir . -ErrorAction SilentlyContinue
          exit 1
        }
        New-Item -Path build -ItemType Directory -Force
        New-Item -Path build/release -ItemType Directory -Force
        Write-Host "Project structure verified"
      shell: powershell

    # Шаг 24: Исправление кодировки icon.rc
    - name: Fix icon.rc encoding
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Fixing encoding of icon.rc..."
        $content = Get-Content -Path icon.rc -Raw -Encoding UTF8
        Set-Content -Path icon.rc -Value $content -NoNewline -Encoding ASCII
        Write-Host "icon.rc encoding fixed to ASCII"
      shell: powershell

    # Шаг 25: Генерация UI-файлов
    - name: Generate UI files
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        Write-Host "Generating ui_mainwindow.h from ui/mainwindow.ui..."
        $uicPath = "C:/Qt/5.15.2/win64_mingw81/bin/uic.exe"
        $outputPath = "build/release/ui_mainwindow.h"
        & $uicPath ui/mainwindow.ui -o $outputPath 2>&1 | Tee-Object -FilePath "uic_output.log"
        if ($LASTEXITCODE -ne 0 -or -not (Test-Path $outputPath)) {
          Write-Host "Error: uic.exe failed or $outputPath not generated (exit code: $LASTEXITCODE)"
          Get-Content uic_output.log
          exit 1
        }
        Write-Host "ui_mainwindow.h generated successfully at $outputPath"
      shell: powershell

    # Шаг 26: Конфигурация и сборка проекта
    - name: Configure and build
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode
        $env:TEMP = [System.IO.Path]::GetTempPath()
        $env:TMP = $env:TEMP
        $env:Path = "C:/Qt/5.15.2/win64_mingw81/bin;C:/Qt/Tools/mingw810_64/bin;C:/vcpkg;" + $env:Path
        $env:VCPKG_ROOT = "C:/vcpkg"
        $env:QML2_IMPORT_PATH = "C:/Qt/5.15.2/win64_mingw81/qml"
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("VCPKG_ROOT", $env:VCPKG_ROOT, [System.EnvironmentVariableTarget]::Process)
        [System.Environment]::SetEnvironmentVariable("QML2_IMPORT_PATH", $env:QML2_IMPORT_PATH, [System.EnvironmentVariableTarget]::Process)

        $buildDate = Get-Date -Format "yyyy-MM-dd"
        $buildVersion = git rev-parse --short HEAD
        if (-not $buildVersion) { $buildVersion = "unknown" }
        Write-Host "Build Date: $buildDate"
        Write-Host "Build Version: $buildVersion"

        Set-Location -Path build
        Write-Host "Running qmake with vcpkg integration..."
        $qmakePath = "C:/Qt/5.15.2/win64_mingw81/bin/qmake.exe"
        $qmakeArgs = @(
          "../ui/DeadCode.pro",
          "CONFIG+=release",
          "QMAKE_CXXFLAGS+=-Wno-attributes",
          "DEFINES+=BUILD_DATE=`"$buildDate`"",
          "DEFINES+=BUILD_VERSION=`"$buildVersion`"",
          "-spec", "win32-g++",
          "INCLUDEPATH+=C:/vcpkg/installed/x64-mingw-dynamic/include",
          "LIBS+=-LC:/vcpkg/installed/x64-mingw-dynamic/lib",
          "LIBS+=-lstdc++fs"
        )
        & $qmakePath $qmakeArgs 2>&1 | Tee-Object -FilePath "../qmake_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed (exit code: $LASTEXITCODE)"
          Get-Content ../qmake_output.log
          exit 1
        }

        Write-Host "Running mingw32-make with parallel jobs..."
        & "C:/Qt/Tools/mingw810_64/bin/mingw32-make.exe" -f Makefile.Release -j4 2>&1 | Tee-Object -FilePath "../make_output.log"
        if ($LASTEXITCODE -ne 0 -or -not (Test-Path release/DeadCode.exe)) {
          Write-Host "Error: mingw32-make failed or DeadCode.exe not generated (exit code: $LASTEXITCODE)"
          Get-Content ../make_output.log
          dir .
          dir release
          exit 1
        }
        Write-Host "Build completed successfully"
      shell: powershell

    # Шаг 27: Тестирование запуска DeadCode.exe
    - name: Test run DeadCode.exe
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode/build
        $env:Path = "C:/Qt/5.15.2/win64_mingw81/bin;C:/Qt/Tools/mingw810_64/bin;C:/vcpkg/installed/x64-mingw-dynamic/bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)
        Write-Host "Running DeadCode.exe..."
        try {
          Start-Process -FilePath "release/DeadCode.exe" -NoNewWindow -Wait -RedirectStandardOutput "deadcode_output.log" -RedirectStandardError "deadcode_error.log" -ErrorAction Stop
          Write-Host "DeadCode.exe executed successfully."
        } catch {
          Write-Host "Warning: Failed to run DeadCode.exe, continuing anyway"
        }
        Write-Host "Standard Output:"; Get-Content "deadcode_output.log" -ErrorAction SilentlyContinue
        Write-Host "Standard Error:"; Get-Content "deadcode_error.log" -ErrorAction SilentlyContinue
      shell: powershell
      continue-on-error: true

    # Шаг 28: Копирование необходимых DLL и плагинов Qt
    - name: Copy Qt DLLs and dependencies
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE/Stealer-DeadCode/build
        Write-Host "Copying Qt DLLs and dependencies to release directory..."
        $dirs = @(
          @{ Dlls = @("Qt5Core.dll", "Qt5Gui.dll", "Qt5Network.dll", "Qt5Widgets.dll", "Qt5Svg.dll", "Qt5Declarative.dll", "Qt5Quick.dll", "Qt5QuickControls2.dll", "Qt5Sql.dll", "Qt5Qml.dll", "Qt5QmlModels.dll", "Qt5QmlWorkerScript.dll"); Source = "C:/Qt/5.15.2/win64_mingw81/bin" },
          @{ Dlls = @("libwinpthread-1.dll", "libgcc_s_seh-1.dll", "libstdc++-6.dll"); Source = "C:/Qt/Tools/mingw810_64/bin" },
          @{ Dlls = @("libsqlite3.dll", "libzip.dll", "zlib1.dll", "bz2.dll", "libcurl.dll", "libssl.dll", "libcrypto.dll"); Source = "C:/vcpkg/installed/x64-mingw-dynamic/bin" }
        )
        foreach ($dir in $dirs) {
          foreach ($dll in $dir.Dlls) {
            if (Test-Path "$($dir.Source)/$dll") {
              Copy-Item -Path "$($dir.Source)/$dll" -Destination release/ -Force
              Write-Host "Copied $dll to release directory"
            } else {
              Write-Host "Warning: $dll not found in $($dir.Source), skipping"
            }
          }
        }

        $qtPluginsDir = "C:/Qt/5.15.2/win64_mingw81/plugins"
        if (Test-Path $qtPluginsDir) {
          $pluginDirs = @("platforms/qwindows.dll", "styles/qwindowsvistastyle.dll", "imageformats/*.dll", "quick/*.dll", "qmltooling/*.dll", "sqldrivers/*.dll")
          foreach ($plugin in $pluginDirs) {
            $dest = $plugin -replace "[/*].*$", ""
            if (Test-Path "$qtPluginsDir/$plugin") {
              New-Item -Path "release/$dest" -ItemType Directory -Force
              Copy-Item -Path "$qtPluginsDir/$plugin" -Destination "release/$dest/" -Force -ErrorAction SilentlyContinue
              Write-Host "Copied Qt plugin $plugin"
            } else {
              Write-Host "Warning: Qt plugin $plugin not found"
            }
          }
        } else {
          Write-Host "Error: Qt plugins directory not found at $qtPluginsDir"
          exit 1
        }

        $qtQmlDir = "C:/Qt/5.15.2/win64_mingw81/qml"
        if (Test-Path $qtQmlDir) {
          $qmlModules = @("QtQml", "QtQuick", "QtQuick.2", "QtQuick.Controls", "QtQuick.Controls.2", "QtQuick.Layouts", "QtQuick.Templates.2", "QtQuick.Window.2", "QtGraphicalEffects", "Qt")
          foreach ($module in $qmlModules) {
            if (Test-Path "$qtQmlDir/$module") {
              New-Item -Path "release/$module" -ItemType Directory -Force
              Copy-Item -Path "$qtQmlDir/$module/*" -Destination "release/$module/" -Recurse -Force -ErrorAction SilentlyContinue
              Write-Host "Copied QML module $module"
            } else {
              Write-Host "Warning: QML module $module not found"
            }
          }
        } else {
          Write-Host "Error: QML directory not found at $qtQmlDir"
          exit 1
        }

        Write-Host "Listing contents of release directory:"
        dir release -Recurse
      shell: powershell

    # Шаг 29: Загрузка логов сборки в случае ошибки
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qt_install.log
          Stealer-DeadCode/mingw_install.log
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/uic_output.log
          Stealer-DeadCode/vcpkg_install.log
          Stealer-DeadCode/build/deadcode_output.log
          Stealer-DeadCode/build/deadcode_error.log
        if-no-files-found: warn

    # Шаг 30: Загрузка артефакта
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: |
          Stealer-DeadCode/build/release/DeadCode.exe
          Stealer-DeadCode/build/release/*.dll
          Stealer-DeadCode/build/release/platforms/qwindows.dll
          Stealer-DeadCode/build/release/styles/qwindowsvistastyle.dll
          Stealer-DeadCode/build/release/imageformats/*.dll
          Stealer-DeadCode/build/release/quick/*.dll
          Stealer-DeadCode/build/release/qmltooling/*.dll
          Stealer-DeadCode/build/release/sqldrivers/*.dll
          Stealer-DeadCode/build/release/QtQml/**/*
          Stealer-DeadCode/build/release/QtQuick/**/*
          Stealer-DeadCode/build/release/QtQuick.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Controls/**/*
          Stealer-DeadCode/build/release/QtQuick.Controls.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Layouts/**/*
          Stealer-DeadCode/build/release/QtQuick.Templates.2/**/*
          Stealer-DeadCode/build/release/QtQuick.Window.2/**/*
          Stealer-DeadCode/build/release/QtGraphicalEffects/**/*
          Stealer-DeadCode/build/release/Qt/**/*
        if-no-files-found: error

    # Шаг 31: Очистка
    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell