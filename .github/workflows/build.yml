name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install setuptools wheel py7zr==0.22.0
        python -m pip install aqtinstall==3.1.*
        python -m aqt version
      shell: powershell

    - name: Check available Qt modules
      run: |
        Write-Host "Checking available Qt versions and architectures..."
        python -m aqt list-qt windows desktop
        Write-Host "Checking available architectures for Qt 5.15.2..."
        python -m aqt list-qt windows desktop --arch 5.15.2
        Write-Host "Checking available modules for Qt 5.15.2 with win64_mingw81..."
        python -m aqt list-qt windows desktop --modules 5.15.2 win64_mingw81
        Write-Host "Checking available MinGW tools..."
        python -m aqt list-tool windows desktop tools_mingw
      shell: powershell
      continue-on-error: true

    - name: Check disk space
      run: |
        Write-Host "Checking available disk space..."
        Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object DeviceID, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}
      shell: powershell

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        target: 'desktop'
        arch: 'win64_mingw81'
        dir: 'C:/Qt'
        install-deps: 'true'
        cache: 'false' # Отключаем кэширование временно
        setup-python: 'false' # Python уже настроен
        aqtversion: '==3.1.*'
      env:
        AQTINSTALL_DEBUG: true

    - name: Install MinGW manually
      run: |
        Write-Host "Installing MinGW manually..."
        if (-not (Test-Path "C:/Qt/Qt/5.15.2/mingw81_64/bin/mingw32-make.exe")) {
          Write-Host "mingw32-make.exe not found, installing MinGW..."
          Write-Host "Listing available MinGW tools..."
          python -m aqt list-tool windows desktop tools_mingw
          $mingwVariant = "qt.tools.win64_mingw810"
          $mingwDir = "mingw810_64"
          Write-Host "Installing MinGW variant: $mingwVariant..."
          python -m aqt install-tool -O C:/Qt windows desktop tools_mingw $mingwVariant
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Error: Failed to install MinGW with aqtinstall"
            exit 1
          }
          Write-Host "Listing contents of C:/Qt/Tools/$mingwDir/bin/..."
          dir "C:/Qt/Tools/$mingwDir/bin/"
          if (-not (Test-Path "C:/Qt/Tools/$mingwDir/bin/g++.exe")) {
            Write-Host "Error: g++.exe not found in C:/Qt/Tools/$mingwDir/bin/"
            exit 1
          }
          Write-Host "Copying MinGW binaries to Qt bin directory..."
          Copy-Item -Path "C:/Qt/Tools/$mingwDir/bin/*" -Destination "C:/Qt/Qt/5.15.2/mingw81_64/bin/" -Force
          if (-not (Test-Path "C:/Qt/Qt/5.15.2/mingw81_64/bin/g++.exe")) {
            Write-Host "Error: g++.exe not found in C:/Qt/Qt/5.15.2/mingw81_64/bin/ after copying"
            dir "C:/Qt/Qt/5.15.2/mingw81_64/bin/"
            exit 1
          }
        } else {
          Write-Host "mingw32-make.exe already exists, checking for g++..."
          if (-not (Test-Path "C:/Qt/Qt/5.15.2/mingw81_64/bin/g++.exe")) {
            Write-Host "Error: g++.exe not found in C:/Qt/Qt/5.15.2/mingw81_64/bin/"
            dir "C:/Qt/Qt/5.15.2/mingw81_64/bin/"
            exit 1
          }
        }
        Write-Host "MinGW installation completed and verified"
      shell: powershell

    - name: Install MinGW-w64 manually
      run: |
        Write-Host "Downloading MinGW-w64..."
        $mingwUrl = "https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z/download"
        $mingwArchive = "C:/mingw-w64.7z"
        $maxRetries = 3
        $retryCount = 0
        $success = $false

        # Попытка загрузки с curl.exe (основной метод для SourceForge)
        Write-Host "Attempting download from $mingwUrl using curl.exe..."
        for ($retryCount = 0; $retryCount -lt $maxRetries; $retryCount++) {
          Write-Host "Attempt $($retryCount + 1) of $maxRetries to download with curl.exe..."
          curl.exe -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3" $mingwUrl -o $mingwArchive
          if ($LASTEXITCODE -eq 0 -and (Test-Path $mingwArchive)) {
            # Проверка размера файла (должен быть больше 10 МБ, так как архив ~40-50 МБ)
            $fileSize = (Get-Item $mingwArchive).Length
            Write-Host "Downloaded file size: $fileSize bytes"
            if ($fileSize -gt 10MB) {
              # Проверка, является ли файл архивом
              $firstBytes = Get-Content $mingwArchive -Encoding Byte -TotalCount 2
              if ($firstBytes[0] -eq 0x37 -and $firstBytes[1] -eq 0x7A) { # Первые два байта 7z архива: 37 7A
                $success = $true
                break
              } else {
                Write-Host "Downloaded file is not a 7z archive (magic bytes do not match)"
                Remove-Item $mingwArchive -Force
              }
            } else {
              Write-Host "Downloaded file is too small ($fileSize bytes), expected at least 10MB"
              Remove-Item $mingwArchive -Force
            }
          }
          Write-Host "Download failed. Retrying in 5 seconds..."
          Start-Sleep -Seconds 5
        }

        if (-not $success) {
          Write-Host "Falling back to Invoke-WebRequest..."
          for ($retryCount = 0; $retryCount -lt $maxRetries; $retryCount++) {
            Write-Host "Attempt $($retryCount + 1) of $maxRetries to download with Invoke-WebRequest..."
            try {
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              $headers = @{"User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"}
              Invoke-WebRequest -Uri $mingwUrl -OutFile $mingwArchive -Headers $headers -UseBasicParsing -MaximumRedirection 10
              if (Test-Path $mingwArchive) {
                $fileSize = (Get-Item $mingwArchive).Length
                Write-Host "Downloaded file size: $fileSize bytes"
                if ($fileSize -gt 10MB) {
                  $firstBytes = Get-Content $mingwArchive -Encoding Byte -TotalCount 2
                  if ($firstBytes[0] -eq 0x37 -and $firstBytes[1] -eq 0x7A) {
                    $success = $true
                    break
                  } else {
                    Write-Host "Downloaded file is not a 7z archive (magic bytes do not match)"
                    Remove-Item $mingwArchive -Force
                  }
                } else {
                  Write-Host "Downloaded file is too small ($fileSize bytes), expected at least 10MB"
                  Remove-Item $mingwArchive -Force
                }
              }
            } catch {
              Write-Host "Download failed: $($_.Exception.Message)"
              if ($retryCount -eq ($maxRetries - 1)) {
                Write-Host "Error: Failed to download MinGW-w64 after $maxRetries attempts with both curl.exe and Invoke-WebRequest"
                exit 1
              }
              Write-Host "Retrying in 5 seconds..."
              Start-Sleep -Seconds 5
            }
          }
        }

        if (-not $success) {
          Write-Host "Error: Failed to download a valid MinGW-w64 archive after $maxRetries attempts"
          exit 1
        }

        Write-Host "Extracting MinGW-w64..."
        7z x $mingwArchive -oC:/ -y
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to extract MinGW-w64 archive"
          exit 1
        }

        Write-Host "Copying MinGW-w64 binaries to Qt bin directory..."
        Copy-Item -Path "C:/mingw64/bin/*" -Destination "C:/Qt/Qt/5.15.2/mingw81_64/bin/" -Force

        Write-Host "Verifying MinGW-w64 installation..."
        if (-not (Test-Path "C:/Qt/Qt/5.15.2/mingw81_64/bin/g++.exe")) {
          Write-Host "Error: g++.exe not found in C:/Qt/Qt/5.15.2/mingw81_64/bin/"
          dir "C:/Qt/Qt/5.15.2/mingw81_64/bin/"
          exit 1
        }
        Write-Host "MinGW-w64 installation completed"
      shell: powershell

    - name: Debug Qt installation
      run: |
        Write-Host "Listing contents of C:/Qt..."
        dir C:/Qt -Recurse
        Write-Host "Listing contents of C:/Qt/Qt..."
        dir C:/Qt/Qt -Recurse
        Write-Host "Listing contents of C:/Qt/Qt/5.15.2..."
        dir C:/Qt/Qt/5.15.2 -Recurse
        Write-Host "Listing contents of C:/Qt/Qt/5.15.2/mingw81_64/bin..."
        dir C:/Qt/Qt/5.15.2/mingw81_64/bin -Recurse
      shell: powershell
      continue-on-error: true

    - name: Verify Qt installation
      run: |
        Write-Host "Verifying Qt installation..."
        $qmakePath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/qmake.exe"
        $uicPath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/uic.exe"
        $makePath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/mingw32-make.exe"
        $gppPath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/g++.exe"
        if (-not (Test-Path $qmakePath)) {
          Write-Host "Error: qmake.exe not found at $qmakePath. Searching for qmake.exe..."
          $qmakePath = (Get-ChildItem -Path C:/Qt -Filter qmake.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $qmakePath) {
            Write-Host "Error: qmake.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found qmake.exe at $qmakePath"
        }
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath. Searching for uic.exe..."
          $uicPath = (Get-ChildItem -Path C:/Qt -Filter uic.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $uicPath) {
            Write-Host "Error: uic.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found uic.exe at $uicPath"
        }
        if (-not (Test-Path $makePath)) {
          Write-Host "Error: mingw32-make.exe not found at $qmakePath. Searching for mingw32-make.exe..."
          $makePath = (Get-ChildItem -Path C:/Qt -Filter mingw32-make.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $makePath) {
            Write-Host "Error: mingw32-make.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found mingw32-make.exe at $makePath"
        }
        if (-not (Test-Path $gppPath)) {
          Write-Host "Error: g++.exe not found at $gppPath. Searching for g++.exe..."
          $gppPath = (Get-ChildItem -Path C:/Qt -Filter g++.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $gppPath) {
            Write-Host "Error: g++.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found g++.exe at $gppPath"
        }
        $env:Path = [System.IO.Path]::GetDirectoryName($qmakePath) + ";" + $env:Path
        Write-Host "PATH: $env:Path"
        Write-Host "qmake path: $qmakePath"
        Write-Host "uic path: $uicPath"
        Write-Host "mingw32-make path: $makePath"
        Write-Host "g++ path: $gppPath"
        Write-Host "Verifying qmake..."
        & $qmakePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake --version failed"
          exit 1
        }
        Write-Host "Verifying mingw32-make..."
        & $makePath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make --version failed"
          exit 1
        }
        Write-Host "Verifying g++..."
        & $gppPath --version
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: g++ --version failed"
          exit 1
        }
        Write-Host "Checking for g++ dependencies..."
        $requiredDlls = @("libgcc_s_seh-1.dll", "libstdc++-6.dll", "libwinpthread-1.dll")
        foreach ($dll in $requiredDlls) {
          if (-not (Test-Path "C:/Qt/Qt/5.15.2/mingw81_64/bin/$dll")) {
            Write-Host "Warning: $dll not found in C:/Qt/Qt/5.15.2/mingw81_64/bin/"
            $dllPath = (Get-ChildItem -Path "C:/Qt" -Filter $dll -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
            if ($dllPath) {
              Write-Host "Found $dll at $dllPath, copying to C:/Qt/Qt/5.15.2/mingw81_64/bin/"
              Copy-Item -Path $dllPath -Destination "C:/Qt/Qt/5.15.2/mingw81_64/bin/" -Force
            } else {
              Write-Host "Error: $dll not found in C:/Qt"
              exit 1
            }
          } else {
            Write-Host "$dll found in C:/Qt/Qt/5.15.2/mingw81_64/bin/"
          }
        }
        Write-Host "Qt and MinGW installation completed and verified"
      shell: powershell

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: C:/vcpkg
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          vcpkg-

    - name: Install vcpkg and dependencies
      run: |
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg..."
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        }
        Write-Host "Running bootstrap-vcpkg..."
        & C:/vcpkg/bootstrap-vcpkg.bat -disableMetrics
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Bootstrap failed. Check the logs."
          exit 1
        }
        $vcpkgExe = "C:/vcpkg/vcpkg.exe"
        if (-not (Test-Path $vcpkgExe)) {
          Write-Host "Error: vcpkg.exe not found at $vcpkgExe"
          exit 1
        }
        $env:Path = "C:/vcpkg;" + $env:Path
        Write-Host "vcpkg version after bootstrap:"
        & $vcpkgExe --version
        Write-Host "Downloading bzip2 archive manually..."
        mkdir -p C:/vcpkg/downloads
        curl.exe -L https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz -o C:/vcpkg/downloads/bzip2-1.0.8.tar.gz
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: Failed to download bzip2-1.0.8.tar.gz"
          exit 1
        }
        Write-Host "Installing vcpkg dependencies with triplet x64-windows-static..."
        & $vcpkgExe install sqlite3 libzip zlib bzip2 curl --triplet x64-windows-static --clean-after-build 2>&1 | Tee-Object -FilePath "vcpkg_install.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: vcpkg install failed. Check the logs for details."
          dir C:/vcpkg/installed/x64-windows-static/lib
          Write-Host "Printing vcpkg logs..."
          if (Test-Path vcpkg_install.log) {
            Write-Host "Contents of vcpkg_install.log:"
            Get-Content vcpkg_install.log
          }
          exit 1
        }
        Write-Host "vcpkg installation completed successfully"
      shell: powershell

    - name: Upload vcpkg logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs
        path: |
          vcpkg_install.log
        if-no-files-found: warn

    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-windows-static/lib"
        $includeDir = "C:/vcpkg/installed/x64-windows-static/include"
        $libs = @("sqlite3", "zip", "zlib", "bz2", "libcurl")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h")
        $missing = @()
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib.lib")) {
            $missing += "$lib.lib"
          }
        }
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) {
            $missing += $header
          }
        }
        if ($missing) {
          Write-Host "Error: Missing libraries or header files: $missing"
          Write-Host "Contents of directory ${libDir}:"
          dir ${libDir}
          Write-Host "Contents of directory ${includeDir}:"
          dir ${includeDir}
          Write-Host "Contents of directory ${includeDir}/curl:"
          dir ${includeDir}/curl
          exit 1
        }
        if (-not (Test-Path $libDir)) {
          Write-Host "Error: Directory $libDir does not exist"
          exit 1
        }
        Write-Host "Listing all .lib files in $libDir"
        Get-ChildItem -Path $libDir -Filter *.lib
        Write-Host "All vcpkg dependencies verified"
      shell: powershell

    - name: Debug project structure
      run: |
        Write-Host "Listing contents of project root:"
        dir D:\a\Stealer-DeadCode\Stealer-DeadCode
        Write-Host "Listing contents of ui directory (if exists):"
        dir D:\a\Stealer-DeadCode\Stealer-DeadCode\ui -ErrorAction SilentlyContinue
        Write-Host "Listing contents of src directory (if exists):"
        dir D:\a\Stealer-DeadCode\Stealer-DeadCode\src -ErrorAction SilentlyContinue
      shell: powershell

    - name: Verify project structure
      run: |
        cd Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Listing contents of project root:"
        dir .
        if (-not (Test-Path ui/DeadCode.pro)) {
          Write-Host "Error: DeadCode.pro not found in ui/"
          dir ui -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path src/main.cpp)) {
          Write-Host "Error: main.cpp not found in src/"
          dir src -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.ui)) {
          Write-Host "Error: mainwindow.ui not found in ui/"
          dir ui -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.cpp)) {
          Write-Host "Error: mainwindow.cpp not found in ui/"
          dir ui -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path ui/mainwindow.h)) {
          Write-Host "Error: mainwindow.h not found in ui/"
          dir ui -ErrorAction SilentlyContinue
          exit 1
        }
        if (-not (Test-Path icon.ico)) {
          Write-Host "Warning: icon.ico not found, creating a placeholder..."
          New-Item -Path . -Name icon.ico -ItemType File -Force
        }
        Write-Host "Creating build directory if it doesn't exist..."
        New-Item -Path build -ItemType Directory -Force
        Write-Host "Creating release directory if it doesn't exist..."
        New-Item -Path release -ItemType Directory -Force
        Write-Host "Verifying write access to build directory..."
        $testFile = "build/test_write.txt"
        try {
          Set-Content -Path $testFile -Value "Test write access"
          Remove-Item -Path $testFile
          Write-Host "Write access to build directory verified"
        } catch {
          Write-Host "Error: No write access to build directory"
          exit 1
        }
        Write-Host "Verifying write access to release directory..."
        $testFile = "release/test_write.txt"
        try {
          Set-Content -Path $testFile -Value "Test write access"
          Remove-Item -Path $testFile
          Write-Host "Write access to release directory verified"
        } catch {
          Write-Host "Error: No write access to release directory"
          exit 1
        }
        Write-Host "Project structure verified"
      shell: powershell

    - name: Verify and generate UI files
      run: |
        cd Stealer-DeadCode
        Write-Host "Checking mainwindow.ui for validity and generating ui_mainwindow.h..."
        $uicPath = "C:/Qt/Qt/5.15.2/mingw81_64/bin/uic.exe"
        if (-not (Test-Path $uicPath)) {
          Write-Host "Error: uic.exe not found at $uicPath. Searching for uic.exe..."
          $uicPath = (Get-ChildItem -Path C:/Qt -Filter uic.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
          if (-not $uicPath) {
            Write-Host "Error: uic.exe not found in C:/Qt"
            dir C:/Qt -Recurse
            exit 1
          }
          Write-Host "Found uic.exe at $uicPath"
        }
        Write-Host "Generating ui_mainwindow.h from ui/mainwindow.ui..."
        & $uicPath ui/mainwindow.ui -o release/ui_mainwindow.h 2>&1 | Tee-Object -FilePath "uic_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mainwindow.ui is invalid. Check the logs for details."
          if (Test-Path uic_output.log) {
            Write-Host "Contents of uic_output.log:"
            Get-Content uic_output.log
          }
          exit 1
        }
        if (-not (Test-Path release/ui_mainwindow.h)) {
          Write-Host "Error: ui_mainwindow.h was not generated"
          dir release
          exit 1
        }
        Write-Host "mainwindow.ui is valid and ui_mainwindow.h generated successfully"
      shell: powershell

    - name: Check PowerShell version
      run: |
        $PSVersionTable.PSVersion
      shell: pwsh

    - name: Debug mkspec configuration
      run: |
        Write-Host "Checking mkspec configuration..."
        $mkspecPath = "C:/Qt/Qt/5.15.2/mingw81_64/mkspecs/win32-g++/qmake.conf"
        if (Test-Path $mkspecPath) {
          Write-Host "Contents of ${mkspecPath}:"
          Get-Content $mkspecPath
        } else {
          Write-Host "Error: mkspec file not found at $mkspecPath"
          exit 1
        }
      shell: powershell

    - name: Configure and build
      run: |
        cd D:\a\Stealer-DeadCode\Stealer-DeadCode\Stealer-DeadCode
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Listing contents of current directory:"
        dir .
        if (-not (Test-Path configure_and_build.ps1)) {
          Write-Host "Error: configure_and_build.ps1 not found in $(Get-Location)"
          exit 1
        }
        Write-Host "configure_and_build.ps1 found, executing..."
        Write-Host "Verifying ui directory exists before running script..."
        if (-not (Test-Path ui)) {
          Write-Host "Error: ui directory not found in $(Get-Location)"
          exit 1
        }
        Write-Host "Current PATH before running configure_and_build.ps1:"
        Write-Host $env:Path
        pwsh -File configure_and_build.ps1
      shell: pwsh

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/uic_output.log
          Stealer-DeadCode/test_compile.log
        if-no-files-found: warn

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: |
          Stealer-DeadCode/build/DeadCode.exe
        if-no-files-found: error

    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "Stealer-DeadCode/release" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell